[
  {
    "path": "posts/2021-12-15-apis-and-parameterized-reports/",
    "title": "API's and parameterized reports",
    "description": "How to access the SimFin API for financial reporting.",
    "author": [
      {
        "name": "Lukas Gröninger",
        "url": {}
      }
    ],
    "date": "2021-12-15",
    "categories": [
      "R",
      "API",
      "reporting"
    ],
    "contents": "\r\n\r\nContents\r\nSimFin\r\nAccessing an API\r\nThe {simfinapi} package\r\n\r\nReporting with R\r\nStock prices over the year\r\nCreating your own metric\r\n\r\n\r\nAPI’s (Application Programming Interfaces) are crucial when it comes to applications communicating with each other. Today they are everywhere around us and I guess we cannot imagine a world without them. We are interacting with API’s several times a day e.g. when we are using Google Maps or sending out a tweet.\r\nSource: www.pexels.comIn the past years many organizations have decided to use an API-first approach for their projects. In this blogpost I want to first show how to access the SimFin API and second how to create your own financial (or any other) report.\r\nSimFin\r\nSimFin stands for simplifying finance and is an organization that provides fundamental financial data about public companies for everyone. In order to get an API-key and download data you need to register with a mail account first. It is recommended to store the API-key in an environment variable. Here is an article that describes how to do that. After having done that you are good to go.\r\nAccessing an API\r\nFirst we’ll load all necessary libraries.\r\n\r\n\r\n# required libraries\r\nlibrary(tidyverse) \r\nlibrary(here)\r\nlibrary(simfinapi)\r\nlibrary(httr2)      # communicating with API's through R\r\nlibrary(lubridate)  # Handling dates\r\nlibrary(gt)         # Pretty tables\r\nlibrary(gtExtras)\r\n\r\n# Setting theme\r\nplotutils::set_custom_theme(base_size = 30)\r\n\r\n\r\n\r\nOn the simfin website you will find a link to their Web API documentation. We start with an easy example of communicating with the API where we’ll request a list of available companies and their SimFinId.\r\nFirst we’ll store our API-key in a variable and create our url (web-address) with which we want to talk to. This information is available in the documentation.\r\n\r\n\r\nmy_apikey <- Sys.getenv(\"SIMFIN_KEY\")\r\n\r\nbase_url <- \"https://simfin.com/api/v2/\"\r\n\r\nendpoint <- \"companies/list\"\r\n\r\n# Create url\r\nurl <- paste0(base_url, endpoint, \"?api-key=\", my_apikey)\r\n\r\n\r\n\r\nNow we could just copy paste this url in our browser and see the result:\r\nInserting our url in the browserBut fortunately there is a more elegant R package for communicating with API’s. The {httr2} package is an advancement of the {httr} package developed by Hadley Wickham.\r\n\r\n\r\n# create the request\r\nreq <- request(url) |> \r\n  req_perform()\r\n\r\n# Check if it worked\r\nresp_status(req)\r\n\r\n\r\n[1] 200\r\n\r\nGlad to see that the request worked. Now we want to parse it’s raw output. In our case this is done via the resp_bod_json() function (as we are dealing with json data - see the browser output). Then we are converting it to a dataframe/tibble.\r\n\r\n\r\ncontent_json <- resp_body_json(req) \r\n\r\ncontent_df <- tibble(simfin_id = map_dbl(content_json$data, 1),\r\n                     ticker = map_chr(content_json$data, 2))\r\n\r\n\r\n\r\nLet’s have a look at the first few rows of our dataframe of available companies:\r\n\r\n\r\nhtml {\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\r\n}\r\n\r\n#ccneyylgie .gt_table {\r\n  display: table;\r\n  border-collapse: collapse;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: #333333;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  background-color: #FFFFFF;\r\n  width: auto;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #A8A8A8;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #A8A8A8;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n}\r\n\r\n#ccneyylgie .gt_heading {\r\n  background-color: #FFFFFF;\r\n  text-align: center;\r\n  border-bottom-color: #FFFFFF;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#ccneyylgie .gt_title {\r\n  color: #333333;\r\n  font-size: 125%;\r\n  font-weight: initial;\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n  border-bottom-color: #FFFFFF;\r\n  border-bottom-width: 0;\r\n}\r\n\r\n#ccneyylgie .gt_subtitle {\r\n  color: #333333;\r\n  font-size: 85%;\r\n  font-weight: initial;\r\n  padding-top: 0;\r\n  padding-bottom: 6px;\r\n  border-top-color: #FFFFFF;\r\n  border-top-width: 0;\r\n}\r\n\r\n#ccneyylgie .gt_bottom_border {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#ccneyylgie .gt_col_headings {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#ccneyylgie .gt_col_heading {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 6px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#ccneyylgie .gt_column_spanner_outer {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n}\r\n\r\n#ccneyylgie .gt_column_spanner_outer:first-child {\r\n  padding-left: 0;\r\n}\r\n\r\n#ccneyylgie .gt_column_spanner_outer:last-child {\r\n  padding-right: 0;\r\n}\r\n\r\n#ccneyylgie .gt_column_spanner {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  overflow-x: hidden;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n#ccneyylgie .gt_group_heading {\r\n  padding: 8px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#ccneyylgie .gt_empty_group_heading {\r\n  padding: 0.5px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#ccneyylgie .gt_from_md > :first-child {\r\n  margin-top: 0;\r\n}\r\n\r\n#ccneyylgie .gt_from_md > :last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n#ccneyylgie .gt_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  margin: 10px;\r\n  border-top-style: solid;\r\n  border-top-width: 1px;\r\n  border-top-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#ccneyylgie .gt_stub {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-right-style: solid;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  padding-left: 12px;\r\n}\r\n\r\n#ccneyylgie .gt_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#ccneyylgie .gt_first_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#ccneyylgie .gt_grand_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#ccneyylgie .gt_first_grand_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: double;\r\n  border-top-width: 6px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#ccneyylgie .gt_striped {\r\n  background-color: rgba(128, 128, 128, 0.05);\r\n}\r\n\r\n#ccneyylgie .gt_table_body {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#ccneyylgie .gt_footnotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#ccneyylgie .gt_footnote {\r\n  margin: 0px;\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#ccneyylgie .gt_sourcenotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#ccneyylgie .gt_sourcenote {\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#ccneyylgie .gt_left {\r\n  text-align: left;\r\n}\r\n\r\n#ccneyylgie .gt_center {\r\n  text-align: center;\r\n}\r\n\r\n#ccneyylgie .gt_right {\r\n  text-align: right;\r\n  font-variant-numeric: tabular-nums;\r\n}\r\n\r\n#ccneyylgie .gt_font_normal {\r\n  font-weight: normal;\r\n}\r\n\r\n#ccneyylgie .gt_font_bold {\r\n  font-weight: bold;\r\n}\r\n\r\n#ccneyylgie .gt_font_italic {\r\n  font-style: italic;\r\n}\r\n\r\n#ccneyylgie .gt_super {\r\n  font-size: 65%;\r\n}\r\n\r\n#ccneyylgie .gt_footnote_marks {\r\n  font-style: italic;\r\n  font-weight: normal;\r\n  font-size: 65%;\r\n}\r\nAvailable companies\r\n    simfin_id\r\n      ticker\r\n    854465\r\n1COV.DE45846\r\nA1253413\r\nA181205636\r\nA20367153\r\nAA939324\r\nAAC_delist68568\r\nAAL\r\n\r\nAfter scrolling through the first entries we recognize the AAPL ticker belonging to Apple. Now we’ll have a closer look at this company and extend our request with more fields.\r\n\r\n\r\n# Define ticker. We want to have a look at Apple\r\nticker <- \"AAPL\"\r\n\r\n# the statement to retrieve. (profit/loss)\r\nstatement <- \"pl\"\r\n\r\n# the period & financial year to retrieve\r\nperiod <- \"q4\"\r\nfyear <- 2021\r\n\r\n# create url\r\nurl <- paste0(base_url, \"companies/statements?api-key=\", my_apikey, \"&ticker=\", ticker, \r\n              \"&statement=\", statement, \"&period=\", period,\"&fyear=\", fyear)\r\n\r\n# make request\r\napple_req <- request(url) |> \r\n  req_perform()\r\n\r\n# convert JSON\r\napple_json <- resp_body_json(apple_req)[[1]]\r\n\r\napple_df <- tibble(variable = map_chr(apple_json$columns, 1),\r\n                   value = map_chr(apple_json$data[[1]], 1, .null = NA_character_))\r\n\r\n\r\n\r\nNow we can inspect some information for Apple’s last quarter.\r\n\r\n\r\nhtml {\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\r\n}\r\n\r\n#wawisoiphq .gt_table {\r\n  display: table;\r\n  border-collapse: collapse;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: #333333;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  background-color: #FFFFFF;\r\n  width: auto;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #A8A8A8;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #A8A8A8;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n}\r\n\r\n#wawisoiphq .gt_heading {\r\n  background-color: #FFFFFF;\r\n  text-align: center;\r\n  border-bottom-color: #FFFFFF;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#wawisoiphq .gt_title {\r\n  color: #333333;\r\n  font-size: 125%;\r\n  font-weight: initial;\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n  border-bottom-color: #FFFFFF;\r\n  border-bottom-width: 0;\r\n}\r\n\r\n#wawisoiphq .gt_subtitle {\r\n  color: #333333;\r\n  font-size: 85%;\r\n  font-weight: initial;\r\n  padding-top: 0;\r\n  padding-bottom: 6px;\r\n  border-top-color: #FFFFFF;\r\n  border-top-width: 0;\r\n}\r\n\r\n#wawisoiphq .gt_bottom_border {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#wawisoiphq .gt_col_headings {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#wawisoiphq .gt_col_heading {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 6px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#wawisoiphq .gt_column_spanner_outer {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n}\r\n\r\n#wawisoiphq .gt_column_spanner_outer:first-child {\r\n  padding-left: 0;\r\n}\r\n\r\n#wawisoiphq .gt_column_spanner_outer:last-child {\r\n  padding-right: 0;\r\n}\r\n\r\n#wawisoiphq .gt_column_spanner {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  overflow-x: hidden;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n#wawisoiphq .gt_group_heading {\r\n  padding: 8px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#wawisoiphq .gt_empty_group_heading {\r\n  padding: 0.5px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#wawisoiphq .gt_from_md > :first-child {\r\n  margin-top: 0;\r\n}\r\n\r\n#wawisoiphq .gt_from_md > :last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n#wawisoiphq .gt_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  margin: 10px;\r\n  border-top-style: solid;\r\n  border-top-width: 1px;\r\n  border-top-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#wawisoiphq .gt_stub {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-right-style: solid;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  padding-left: 12px;\r\n}\r\n\r\n#wawisoiphq .gt_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#wawisoiphq .gt_first_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#wawisoiphq .gt_grand_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#wawisoiphq .gt_first_grand_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: double;\r\n  border-top-width: 6px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#wawisoiphq .gt_striped {\r\n  background-color: rgba(128, 128, 128, 0.05);\r\n}\r\n\r\n#wawisoiphq .gt_table_body {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#wawisoiphq .gt_footnotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#wawisoiphq .gt_footnote {\r\n  margin: 0px;\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#wawisoiphq .gt_sourcenotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#wawisoiphq .gt_sourcenote {\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#wawisoiphq .gt_left {\r\n  text-align: left;\r\n}\r\n\r\n#wawisoiphq .gt_center {\r\n  text-align: center;\r\n}\r\n\r\n#wawisoiphq .gt_right {\r\n  text-align: right;\r\n  font-variant-numeric: tabular-nums;\r\n}\r\n\r\n#wawisoiphq .gt_font_normal {\r\n  font-weight: normal;\r\n}\r\n\r\n#wawisoiphq .gt_font_bold {\r\n  font-weight: bold;\r\n}\r\n\r\n#wawisoiphq .gt_font_italic {\r\n  font-style: italic;\r\n}\r\n\r\n#wawisoiphq .gt_super {\r\n  font-size: 65%;\r\n}\r\n\r\n#wawisoiphq .gt_footnote_marks {\r\n  font-style: italic;\r\n  font-weight: normal;\r\n  font-size: 65%;\r\n}\r\nApple's 4. Quarter 2021\r\n    variable\r\n      value\r\n    Ticker\r\nAAPLReport Date\r\n2021-09-30Publish Date\r\n2021-10-29Revenue\r\n83360000000.000000Gross Profit\r\n35174000000.000000Operating Expenses\r\n-11388000000.000000Research & Development\r\n-5772000000.000000\r\n\r\nThe {simfinapi} package\r\nAccessing the API in this way is somewhat cumbersome for more complex matters. But thankfully someone has written an R package for this as well.\r\nThanks to Matthias Gomolka for maintaining the {simfinapi} R package. This package wraps the SimFin API and allows us an easier access.\r\nFirst we set our API-key and a cache directory for our requests.\r\n\r\n\r\n# Setting the api key\r\nsfa_set_api_key(api_key = Sys.getenv(\"SIMFIN_KEY\"))\r\n# Setting up cache directory\r\nsfa_set_cache_dir(here(\"_posts/2021-12-15-apis-and-parameterized-reports\", \r\n                       \"simfin_cache\"), create = TRUE)\r\n\r\n\r\n\r\nNow we can use a set of functions to retrieve the information of interest. Our first request can be rewritten in one line as this:\r\n\r\n\r\navailable_companies <- sfa_get_entities()\r\n\r\n\r\n\r\nIf we want to look at some basic information for a company like Apple, we would write:\r\n\r\n\r\ncompany_infos <- sfa_get_info(ticker = \"AAPL\")\r\n\r\n\r\n\r\nReporting with R\r\nOne of the biggest strengths of R is its ability to produce beautiful reproducible reports and articles. This is done with {RMarkdown} and additional packages like {knitr}, {distill} etc. To learn more, I recommend the RMarkdown Cookbook by Yihui Xie, Christophe Dervieux and Emily Riederer.\r\nFor our small example report we want to focus on a specific set of companies. Let’s say we want to know how the stock prices of different social media networks performed in 2020. Were all companies equally affected by the Corona Virus? What we want also is to be able to change the set of companies as well as the year of interest programmatically when rendering the report. RMarkdown lets you define specific parameters at the top that you can access then inside your R code chunks.\r\nTo include these parameters in our report we have to define them first in the YAML header of our document. In our case this may look like this:\r\n\r\nparams:\r\n  stocks: [\"FB\", \"TWTR\", \"SNAP\", \"PINS\"]\r\n  fiscal_year: 2020\r\n\r\nHere we provide a list of stocks and the fiscal year as variables. We can access for example the list of stocks in our script with params$stocks.\r\nStock prices over the year\r\nIn this manner we can now use our parameters as arguments for the {simfinapi} functions.\r\n\r\n\r\n# Get company infos\r\ncompany_infos <- sfa_get_info(ticker = params$stocks)\r\n\r\n# Get stock prices of companies of interest\r\nshares <- sfa_get_prices(ticker = params$stocks) |> \r\n  left_join(company_infos)\r\n\r\n\r\n\r\nNow we can generate an outpot comparing the stock price development over the year we specified before.\r\n\r\n\r\nshares |> \r\n  mutate(year = year(date)) |> \r\n  # Filter only prices for our year of interest\r\n  filter(year == params$fiscal_year) |> \r\n  ggplot(aes(x = date, y = adj_close)) +\r\n  geom_line() +\r\n  scale_y_continuous(labels = scales::dollar_format()) +\r\n  facet_wrap(~company_name, scales = \"free_y\") +\r\n  scale_x_date(date_breaks = \"3 months\", date_labels = \"%b\") +\r\n  labs(title = glue::glue(\"Stock prices over the year {params$fiscal_year}\"),\r\n       x = NULL,\r\n       y = NULL)\r\n\r\n\r\n\r\n\r\nWe can not only filter by our parameters but also using it to dynamically change the title of the plot. With different scales it is hard to compare the development between the selected companies. That’s why we’ll produce a plot with a logarithmized y axis.\r\n\r\n\r\nshares |>  \r\n  mutate(year = year(date)) |>  \r\n  filter(year == params$fiscal_year) |> \r\n  ggplot(aes(x = date, y = adj_close, colour = company_name)) +\r\n  geom_line(lwd = 1) +\r\n  scale_y_continuous(trans = \"log10\", labels = scales::dollar_format()) +\r\n  viridis::scale_colour_viridis(discrete = TRUE) +\r\n  scale_x_date(date_breaks = \"3 months\", date_labels = \"%b\") +\r\n  labs(title = \"Comparison with logarithmized y axis\",\r\n       x = NULL,\r\n       y = NULL,\r\n       colour = NULL) \r\n\r\n\r\n\r\n\r\nHere we can see directly the comparison between companies and specifically the “Corona effect” in the middle of march. By now I guess many have seen logarithmized scales as they were quite popular to illustrate exponential growth of Corona Virus cases. The difference between 10$ and 100$ is the same as the difference between 30$ and 300$. The social network whose share price has risen the most is Pinterest. One hypothesis is that Pinterest in particular could benefit from the retreat into the own four walls. On this platform, the topics of designing and decorating the home, garden etc. are popular.\r\nCreating your own metric\r\nNow we don’t want to only compare the development of the stock prices, but have a deeper look at some characteristics of these companies. The SimFin API offers a variety of variables and information. We can access them through the {simfinapi} function sfa_get_statement(). For now, we want to calculate our own metric to compare our four companies. This metric will be the Rule of 401 which is typically applied to SaaS (Software as a Service) companies to evaluate their development. Two metrics will be combined here. One is the growth of the company and the other is profit. In the first years of a company, it is common that there is no profit yet, but an emphasis on growth. As a rule of thumb the sum of growth and profit should equal to at least 40. For example 50% Growth and -10% Profit Margin would still satisfy this condition.\r\n\\[\r\nRule\\; of\\; 40 = Growth + Profit\\; Margin\r\n\\]\r\nThis simple metric can, of course, also be weighted if one of the two components is considered more relevant. Now let’s examine what this metric looks like for companies at the end of the fiscal year.\r\n\r\n\r\n# The net profit margin information is found in the \"derived\" statement\r\nderived_q4 <- sfa_get_statement(ticker = params$stocks,\r\n                                fyear = params$fiscal_year,\r\n                                period = \"q4\",\r\n                                statement = \"derived\")\r\n\r\nderived_q3 <- sfa_get_statement(ticker = params$stocks,\r\n                                fyear = params$fiscal_year,\r\n                                period = \"q3\",\r\n                                statement = \"derived\")\r\n\r\n# The revenue information can be found in the pl (profit/loss) statement\r\nprofit_loss_q4 <- sfa_get_statement(ticker = params$stocks,\r\n                                    fyear = params$fiscal_year,\r\n                                    period = \"q4\",\r\n                                    statement = \"pl\")\r\n\r\nprofit_loss_q3 <- sfa_get_statement(ticker = params$stocks,\r\n                                    fyear = params$fiscal_year,\r\n                                    period = \"q3\",\r\n                                    statement = \"pl\")\r\n# Define our own Metric\r\nrule_40 <- profit_loss_q4 |> \r\n  select(ticker, fiscal_year, revenue) |> \r\n  mutate(growth = revenue/profit_loss_q3$revenue - 1) |> \r\n  inner_join(select(derived_q4, net_profit_margin, ticker)) |> \r\n  mutate(rule_40 = growth + net_profit_margin,\r\n         revenue = revenue/1e6)\r\n\r\n\r\n\r\n\r\n\r\nhtml {\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\r\n}\r\n\r\n#hclpggfpij .gt_table {\r\n  display: table;\r\n  border-collapse: collapse;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: #333333;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  background-color: #FFFFFF;\r\n  width: auto;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #A8A8A8;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #A8A8A8;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n}\r\n\r\n#hclpggfpij .gt_heading {\r\n  background-color: #FFFFFF;\r\n  text-align: center;\r\n  border-bottom-color: #FFFFFF;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#hclpggfpij .gt_title {\r\n  color: #333333;\r\n  font-size: 125%;\r\n  font-weight: initial;\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n  border-bottom-color: #FFFFFF;\r\n  border-bottom-width: 0;\r\n}\r\n\r\n#hclpggfpij .gt_subtitle {\r\n  color: #333333;\r\n  font-size: 85%;\r\n  font-weight: initial;\r\n  padding-top: 0;\r\n  padding-bottom: 6px;\r\n  border-top-color: #FFFFFF;\r\n  border-top-width: 0;\r\n}\r\n\r\n#hclpggfpij .gt_bottom_border {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#hclpggfpij .gt_col_headings {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#hclpggfpij .gt_col_heading {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 6px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#hclpggfpij .gt_column_spanner_outer {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n}\r\n\r\n#hclpggfpij .gt_column_spanner_outer:first-child {\r\n  padding-left: 0;\r\n}\r\n\r\n#hclpggfpij .gt_column_spanner_outer:last-child {\r\n  padding-right: 0;\r\n}\r\n\r\n#hclpggfpij .gt_column_spanner {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  overflow-x: hidden;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n#hclpggfpij .gt_group_heading {\r\n  padding: 8px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#hclpggfpij .gt_empty_group_heading {\r\n  padding: 0.5px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#hclpggfpij .gt_from_md > :first-child {\r\n  margin-top: 0;\r\n}\r\n\r\n#hclpggfpij .gt_from_md > :last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n#hclpggfpij .gt_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  margin: 10px;\r\n  border-top-style: solid;\r\n  border-top-width: 1px;\r\n  border-top-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#hclpggfpij .gt_stub {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-right-style: solid;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  padding-left: 12px;\r\n}\r\n\r\n#hclpggfpij .gt_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#hclpggfpij .gt_first_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#hclpggfpij .gt_grand_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#hclpggfpij .gt_first_grand_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: double;\r\n  border-top-width: 6px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#hclpggfpij .gt_striped {\r\n  background-color: rgba(128, 128, 128, 0.05);\r\n}\r\n\r\n#hclpggfpij .gt_table_body {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#hclpggfpij .gt_footnotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#hclpggfpij .gt_footnote {\r\n  margin: 0px;\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#hclpggfpij .gt_sourcenotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#hclpggfpij .gt_sourcenote {\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#hclpggfpij .gt_left {\r\n  text-align: left;\r\n}\r\n\r\n#hclpggfpij .gt_center {\r\n  text-align: center;\r\n}\r\n\r\n#hclpggfpij .gt_right {\r\n  text-align: right;\r\n  font-variant-numeric: tabular-nums;\r\n}\r\n\r\n#hclpggfpij .gt_font_normal {\r\n  font-weight: normal;\r\n}\r\n\r\n#hclpggfpij .gt_font_bold {\r\n  font-weight: bold;\r\n}\r\n\r\n#hclpggfpij .gt_font_italic {\r\n  font-style: italic;\r\n}\r\n\r\n#hclpggfpij .gt_super {\r\n  font-size: 65%;\r\n}\r\n\r\n#hclpggfpij .gt_footnote_marks {\r\n  font-style: italic;\r\n  font-weight: normal;\r\n  font-size: 65%;\r\n}\r\nRule of 40\r\n    ticker\r\n      fiscal_year\r\n      revenue\r\n      growth\r\n      net_profit_margin\r\n      rule_40\r\n    FB\r\n2020\r\n28071\r\n0.307\r\n0.400\r\n0.707PINS\r\n2020\r\n706\r\n0.594\r\n0.295\r\n0.889SNAP\r\n2020\r\n911\r\n0.343\r\n-0.124\r\n0.219TWTR\r\n2020\r\n1289\r\n0.377\r\n0.172\r\n0.549\r\n\r\nPinterest reached with almost 60% the highest growth relative to the previous quarter. Facebook - or Meta as it’s now being called - had the highest profitability. Added together only Snap was not able to satisfy the Rule of 40 metric.\r\nIn such a way, reports can now be created programmatically. If we want to e.g. exchange Snapchat with Google (Ticker is GOOG), we would render our report as follows:\r\n\r\n\r\nrmarkdown::render(my_report.Rmd, \r\n                  params = list(stocks = c(\"FB\", \"TWTR\", \"GOOG\", \"PINS\")))\r\n\r\n\r\n\r\nThere are countless possibilities to create specific reporting templates and functions for your own use cases. A really minimal example of how such a report might look like can be found here in the Github repo of this blogpost. The output format is of course not limited to html, but can be PDF as well.\r\n\r\nhttps://kpisense.com/glossary/rule-of-40↩︎\r\n",
    "preview": "posts/2021-12-15-apis-and-parameterized-reports/img/use_apis.jpg",
    "last_modified": "2021-12-21T13:47:30+01:00",
    "input_file": "apis-and-parameterized-reports.knit.md"
  },
  {
    "path": "posts/2021-12-05-looping-over-the-bridge/",
    "title": "Looping over the bridge",
    "description": "Comparing loops by simulating a Squid Game scene",
    "author": [
      {
        "name": "Lukas Gröninger",
        "url": {}
      }
    ],
    "date": "2021-12-05",
    "categories": [
      "R",
      "simulation"
    ],
    "contents": "\r\n\r\nContents\r\nLet the Game begin\r\nMonte Carlo Solution\r\nBenchmarking for vs while loop\r\nMathematical Solution\r\n\r\n\r\nA few weeks ago I did an introductory R workshop where one of the students asked about loops and the difference of for vs while loops. This blogpost is about illustrating these two types of loops using a simulation example.\r\nLet the Game begin\r\nI think the majority knows the Netflix show “Squid Game”. In this series the contestants have to survive several deadly games. Here I want to focus on the 5. game of the show. There are 16 players who have to pass a bridge of 18 * 2 glass plates. At each step they have to decide on which plate they step. With a 50% chance they jump on the harder glass which is able to hold their body, the other 50% will mean their death. As I was watching the show I thought that this would be a perfect example to answer a statistical question by using loops and simulation.\r\nThe question I wanted to answer was:\r\n\r\nHow many players do we expect to survive the game?\r\n\r\n\r\n\r\n\r\nFigure 1: Source: https://www.distractify.com/p/games-played-in-squid-game\r\n\r\n\r\n\r\nRemark:\r\nAfter opening twitter, I came across a tweet discussing John Helveston’s blogpost where he basically explained exactly what I wanted to do. I highly recommend his blog. I adapted his run_game function and where he used data.table I went with the tidy alternative.\r\nMonte Carlo Solution\r\nWe can solve the question about the number of survivors to expect by simulating the game. When using random simulation to answer statistical problems, this is called Monte Carlo Simulation.\r\nFirst we load the necessary library and set a custom theme for our plots.\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(microbenchmark)\r\n\r\nplotutils::set_custom_theme(base_size = 32)\r\n\r\n\r\n\r\nThen we create a dataframe as an input for the game. In this dataframe the alive column is set to 1 as in the beginning obviously every player is alive.\r\n\r\n\r\n# Define number of players\r\nnum_players <- 16\r\nplayers <- tibble(player = seq(num_players), \r\n                  alive = 1)\r\n\r\n# Let's have a look at the dataframe\r\nplayers\r\n\r\n\r\n# A tibble: 16 x 2\r\n   player alive\r\n    <int> <dbl>\r\n 1      1     1\r\n 2      2     1\r\n 3      3     1\r\n 4      4     1\r\n 5      5     1\r\n 6      6     1\r\n 7      7     1\r\n 8      8     1\r\n 9      9     1\r\n10     10     1\r\n11     11     1\r\n12     12     1\r\n13     13     1\r\n14     14     1\r\n15     15     1\r\n16     16     1\r\n\r\nNow we are going to create the function for our game. This is a great example to look at the differences between for and while loops.\r\nWe start by creating a function using a for loop:\r\n\r\n\r\n# Define a function for simulating one game using a for loop\r\nrun_game_for <- function(players, num_steps) {\r\n  lead_player <- 1\r\n  for (step in seq(num_steps)) {\r\n    # 50% chance that the glass is safe\r\n    if (sample(c(TRUE, FALSE), 1)) {\r\n      # It is safe, now the player can try the next one!\r\n      next\r\n    } else {\r\n      # The glass broke...\r\n      # Before continuing, check if any players are still alive\r\n      if (sum(players$alive) == 0) { return(0) }\r\n      # The lead player died\r\n      players$alive[lead_player] <- 0\r\n      lead_player <- lead_player + 1\r\n    }\r\n  }\r\n  return(sum(players$alive))\r\n}\r\n\r\n\r\n\r\nThen we create a function using a while loop. The setup is quite similar to the previously used run_game_for function.\r\n\r\n\r\n# Define a function for simulating one game using a while loop\r\nrun_game_while <- function(players, num_steps) {\r\n  # Initialize starting values\r\n  lead_player <- 1\r\n  current_step <- 0\r\n  game_running <- TRUE\r\n  \r\n  while (game_running) {\r\n    # Let's see if the glass holds...\r\n    if (sample(c(TRUE, FALSE), 1)) {\r\n      # The glass holds and the player can go one step further\r\n      current_step <- current_step + 1\r\n    } else {\r\n      # Check if there are still players alive, if not end the game\r\n      if (sum(players$alive) == 0) { return(0)}\r\n      # Apparently the glass didnt hold and the current lead player dies\r\n      players$alive[lead_player] <- 0\r\n      lead_player <- lead_player + 1\r\n      # Anyway the player can go one step further \r\n      current_step <- current_step + 1\r\n    }\r\n    if (current_step == num_steps) {\r\n      # If they got to the last step, they did it and the game stops\r\n      game_running <- FALSE\r\n    }\r\n  }\r\n  # Return the number of remaining players\r\n  return(sum(players$alive))\r\n}\r\n\r\n\r\n\r\nLet’s give it a try and see how many survive in our game.\r\n\r\n\r\nset.seed(001)\r\n\r\n# Run one iteration of the game\r\nsingle_game <- run_game_while(players, num_steps = 18)\r\nsingle_game\r\n\r\n\r\n[1] 9\r\n\r\nWe were interested in the expected value of the outcome. One iteration is not enough, but this is no problem at all. We can simply simulate our game multiple times.\r\n\r\n\r\n# Set seed value to keep reproducibility and to give a hint who wins the game\r\nset.seed(456)\r\n\r\n# Define number of runs or games we want to play\r\nn_runs <- 10000\r\n\r\n# Create dataframe with outcome of each game\r\nsims <- tibble(trial = seq(n_runs)) |> \r\n  rowwise() |> \r\n  mutate(while_loop = run_game_while(players, num_steps = 18),\r\n         for_loop = run_game_for(players, num_steps = 18)) |> \r\n  pivot_longer(-trial, names_to = \"loop\")\r\n\r\n\r\n\r\nHave a look at the descriptive statistics:\r\n\r\n\r\nsummary(sims$value)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n  0.000   6.000   7.000   6.976   8.000  15.000 \r\n\r\nThere were games where zero players survived the game and there were games where almost all players managed to survive.\r\nOf course we can also visualize our distribution:\r\n\r\n\r\n# Visualizing the resulting distribution\r\nsims |> \r\n  ggplot(aes(x = value, fill = loop)) +\r\n  geom_bar(position = position_dodge()) +\r\n  scale_x_continuous(breaks = seq(0, num_players)) +\r\n  labs(title = \"Distribution of numbers of surviving players\",\r\n       x = \"N surviving players\",\r\n       fill = NULL)\r\n\r\n\r\n\r\n\r\nThe two different colours indicate which function was used to calculate the result. From this graph we directly see almost the exact same result from the two functions.\r\nTo answer our previously posed question: We would expect 7 players to survive the game.\r\nBenchmarking for vs while loop\r\nNow we can also test the performance of the different functions against each other.\r\n\r\n\r\nset.seed(001)\r\n\r\ntest <- microbenchmark(\r\n  run_game_for(players, num_steps = 18),\r\n  run_game_while(players, num_steps = 18)\r\n)\r\n\r\nautoplot(test)\r\n\r\n\r\n\r\n\r\nAgain there is not really a difference…\r\nMathematical Solution\r\nOf course we can not only simulate the game to get to our solution.\r\nHere is the mathematical formula for n players:\r\n\\[\r\n\\sum_{i = 0}^{n-1} \\binom{18}{i} * 0.5^i * 0.5^{18-i} * (n-i)\r\n\\]\r\nWe can convert it to R Code and calculate the result.\r\n\r\n\r\nn <- 16\r\n\r\nexpected_fun <- function(i) choose(18, i) * 0.5^i * 0.5^(18-i) * (n - i)\r\n\r\nmap_dbl(0:(n-1), expected_fun) |> sum()\r\n\r\n\r\n[1] 7.000076\r\n\r\nEt voilà! The result from the Monte Carlo simulation was confirmed.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-12-05-looping-over-the-bridge/img/squid_game_bridge.jpg",
    "last_modified": "2021-12-21T13:49:47+01:00",
    "input_file": "looping-over-the-bridge.knit.md"
  },
  {
    "path": "posts/welcome/",
    "title": "I started a Blog",
    "description": "Why did I start it and what are my plans?",
    "author": [
      {
        "name": "Lukas Gröninger",
        "url": {}
      }
    ],
    "date": "2021-12-03",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nWhy did I start it?\r\nWhat are my plans?\r\n\r\nWhy did I start it?\r\nAfter reading and seeing so many great R or data science blogs I wanted to join the game. Whenever I’m searching for a solution for a problem at work or at the university, I stumble across a blog post that explains something or pushes me in the right direction. I’ve benefited soo much from various articles, posts or ideas. Additionally having a small place in the Internet sounded like a nice idea. Moreover, the R community is so friendly, welcoming and inspiring, that I thought I could participate a bit.\r\nWhat are my plans?\r\nAt the moment I don’t have any big plans for article series about certain topics. I just wanted to create something where I could share some of my work. In the best case, this blog then also serves someone to come across the solution to his or her problem.\r\nJust a small warning in the end. You should not expect to see only fully elaborated work and also the code might not be that elegant and efficient as seen on other great blogs (see list below).\r\nThis provides me with both an excuse and the motivation to get stuff online. Pls consider the whole thing as a work in progress…\r\nBlogs/People that inspired me:\r\nThe Mockup Blog\r\nJesse Mostipak\r\nJosiah Parry\r\nJohn Paul Helveston\r\nDanielle Navarro\r\nShannon Pileggi\r\nAlison Hill\r\nColin Fay\r\nand many more!\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-12-06T11:37:32+01:00",
    "input_file": {}
  }
]
