[
  {
    "path": "posts/2022-04-20-not-so-standard-evaluations/",
    "title": "Not so standard evaluations",
    "description": "Getting a better understanding of the tidyeval framework",
    "author": [
      {
        "name": "Lukas Gr√∂ninger",
        "url": {}
      }
    ],
    "date": "2022-04-20",
    "categories": [
      "R",
      "NSE",
      "Metaprogramming"
    ],
    "contents": "\r\n\r\nContents\r\nList of helpful Ressources\r\nAn example of using NSE\r\nConclusion\r\n\r\nThe R language has some peculiarities. One of these is the use of non-standard evaluation (NSE) and the notion of Metaprogramming. I‚Äôm using R for quite some time now and these concepts have already given me some serious headaches (and will probably continue to do so‚Ä¶). Nevertheless, I have become a friend of this concept and enjoy using it. In the first two years of using R (it was my first programming language), I have not given a single thought to this idea, because I didn‚Äôt need it at all. Furthermore, I didn‚Äôt even question why the following was working:\r\n\r\n\r\nlibrary(dplyr)\r\n\r\nmtcars |> filter(cyl == 6)\r\n\r\n\r\n                mpg cyl disp  hp drat   wt qsec vs am gear carb\r\nMazda RX4      21.0   6  160 110 3.90 2.62 16.5  0  1    4    4\r\nMazda RX4 Wag  21.0   6  160 110 3.90 2.88 17.0  0  1    4    4\r\nHornet 4 Drive 21.4   6  258 110 3.08 3.21 19.4  1  0    3    1\r\nValiant        18.1   6  225 105 2.76 3.46 20.2  1  0    3    1\r\nMerc 280       19.2   6  168 123 3.92 3.44 18.3  1  0    4    4\r\nMerc 280C      17.8   6  168 123 3.92 3.44 18.9  1  0    4    4\r\nFerrari Dino   19.7   6  145 175 3.62 2.77 15.5  0  1    5    6\r\n\r\nHow does R know where to find cyl and why does both library(dplyr) and library(\"dplyr\") work?\r\nI don‚Äôt recall which problem I tried to fix, but one day I landed on a stackoverflow thread where one solution used the !! (bang-bang) operator. I have never seen it before and was puzzled. I copied the code and was glad that it worked, but I had no idea why. The more I started to define my own functions, the more I stumbled across this strange topic of non standard evaluations and Metaprogramming. There were more than a handful of expressions (üòâ) I couldn‚Äôt grasp. Examples are:\r\nQuasiquotation\r\n!! (Bang-Bang Operator)\r\n... (Dynamic dots)\r\nData Masking\r\n!!! (Big Bang or unquote-splice Operator)\r\nDefusing an expression\r\n{{}} (Embrace, Curly-Curly or Doublestashe Operator)\r\nClosures\r\nQuosures\r\nAll of these concepts seem highly complex and difficult and this post is not about trying to explain all or any of them in detail. For an R Beginner I feel these topics are quite intimidating and for me they would have been overwhelming and deterring. But have no fear, there are great ressources out there in the {rlang} documentation as well as in the Big Picture Chapture of Advanced R. What also helped me a lot was the Tidy Evaluation book by Lionel Henry and Hadley Wickham. In particular, the difference and the use cases between the Bang-Bang (!!) and the Big-Bang (!!!) operator became much clearer after reading it.\r\nSo what is this post about then? It should serve as a ressource (for myself and potentially others) to find helpful articles/posts or videos on the topic and to provide an example of how I use non standard evaluation in exploratory data analysis.\r\n\r\nI remember being really impressed after having seen how David Robinson used custom functions for interactive data exploration.\r\nList of helpful Ressources\r\nBlog Posts\r\nProgramming with Dplyr article\r\nTips on non-standard evaluation by Kun Ren\r\nStandard and non standard evaluation and On quosures by Brodie Gaslam\r\nTidy Eval is confusing sometimes by Kelly Bodwin\r\nVideos\r\nTidy Evaluation in 5 mins by Hadley Wickham\r\nUseful Tidy Evaluation in R by Connor Krenzer\r\nLazy Evaluation by Jenny Bryan\r\nR Metaprogramming Tutorial Playlist in german and english by Jurijy Weinblat\r\nOther\r\nquo vs enquo on stackoverflow\r\nTidy Eval use cases on R-Studio Community\r\nInteractivity and programming in the tidyverse by Lionel Henry\r\nAn example of using NSE\r\nI mainly use the Tidy eval framework in the realm of interactive data exploration and visualization. Here I will show how to apply it to create count summaries for multiple variables of a dataframe. I‚Äôll use the tabyl() function from the {janitor} package. Often I just want to have a short look at all distinct values of a variable and the corresponding percentages. This is exactly what tabyl allows us to do. We start by loading the required libraries.\r\n\r\n\r\n# Required libraries\r\n\r\nlibrary(dplyr)\r\nlibrary(purrr)\r\nlibrary(palmerpenguins) # Penguins Dataset to explore\r\n\r\n\r\n\r\nThe dataset for which we want to create count summaries is the penguins dataset from the {palmerpenguins} package. This is a classic dataset to play around with and offers eight variables.\r\nSelecting variables from penguins dataframeI really like this preview behaviour when accessing named lists or dataframes. What I also find enormously useful is the tidyselect syntax. Often the structure of variables in a dataframe follows a certain system. In this case we have variables that show directly in which metric they are measured (e.g.¬†bill_length_mm). Tidyselect helpers offer a way to utilize this structure when selecting variables. There are several possibilities:1\r\n\r\n\r\n# Selecting all variables measured in mm\r\nselect(penguins, ends_with(\"_mm\"))\r\n\r\n# Selecting all variables containing the word \"bill\"\r\nselect(penguins, contains(\"bill\"))\r\n\r\n# Selecting all variables from island up to sex\r\nselect(penguins, island:sex)\r\n\r\n# Selecting specific variables\r\nselect(penguins, c(island, sex, year))\r\n\r\n\r\n\r\nLet‚Äôs have a look at the output when using tabyl. We want to look at the gender or sex values of penguins in our dataset.\r\n\r\n\r\njanitor::tabyl(penguins, sex)\r\n\r\n\r\n    sex   n percent valid_percent\r\n female 165   0.480         0.495\r\n   male 168   0.488         0.505\r\n   <NA>  11   0.032            NA\r\n\r\nHere we see that we get the count of distinct values and (valid) percentages. I want to store information like this for multiple variables in a named summary list. So how do I approach this problem?\r\nAs Jenny Bryan said in her Lazy evaluation talk you probably don‚Äôt have to go too deep in the rlang tidy evaluation framework. In many cases you can ‚Äújust pass the dots‚Äù. This refers to the ... (Dynamic dots or forwarding) operator where you can collect multiple arguments to e.g.¬†select() or group_by() calls.\r\n\r\n\r\n# Creating my custom var_summary function with `...`\r\nvar_summary <- function(df, ...) {\r\n  # Extract the column names in a character vector\r\n  col_names <- df |>\r\n    # Now I use the tidyselect helpers of the second argument\r\n    select(...) |>\r\n    names()\r\n  \r\n  # Map over the character column names and create the count summary\r\n  # In the end we want to name our so created list\r\n  col_names |>\r\n    map(~janitor::tabyl(df, !!sym(.x)) |> \r\n          arrange(desc(n)) |> \r\n          mutate(cum_percent = cumsum(percent))) |>\r\n    set_names(col_names)\r\n}\r\n\r\n# Test the function\r\nvar_sum <- var_summary(penguins, ends_with(\"_mm\"))\r\n\r\n\r\n\r\nAccessing the resulting var_sum listBesides the ... argument the !!sym(.x) stands out as a hint at a NSE pattern. What the sym() function does in our case is converting the character column name into a symbol that can be used as the second argument to the tabyl() function. This has to be evaluated through the use of the Bang-Bang operator. Let‚Äôs look at an example:\r\n\r\n\r\n# Define a character column name of our dataframe\r\ncol_name <- \"island\"\r\n\r\n# Convert to symbol\r\nsym_col_name <- sym(col_name)\r\n\r\n# Force evaluation of symbol in the context of the tabyl function\r\nvar_sum <- janitor::tabyl(penguins, !!sym_col_name) |> \r\n  arrange(desc(n)) |> \r\n  mutate(cum_percent = cumsum(percent)) \r\n\r\nvar_sum\r\n\r\n\r\n    island   n percent cum_percent\r\n    Biscoe 168   0.488       0.488\r\n     Dream 124   0.360       0.849\r\n Torgersen  52   0.151       1.000\r\n\r\n\r\nGreat, but there is also another possibility we can use as a second argument to our created function. The {{}} doublestache operator (term coined by Kelly Bodwin) which was introduced in rlang 0.4.0 (2019) can be used exactly for our use case as we only want to pass one argument of variable selection. The dynamic dots are used as a more general placeholder for multiple arguments. Here we just exchange the ... with the {{}}.\r\n\r\n\r\n# Creating my custom var_summary function with the doublestache operator\r\nvar_summary <- function(df, vars) {\r\n  # Extract the column names in a character vector\r\n  col_names <- df |>\r\n    # Now I use the tidyselect helpers of the second argument\r\n    select({{vars}}) |>\r\n    names()\r\n  \r\n  # Map over the character column names and create the count summary\r\n  # In the end we want to name our so created list\r\n  col_names |>\r\n    map(~janitor::tabyl(df, !!sym(.x)) |> \r\n          arrange(desc(n)) |> \r\n          mutate(cum_percent = cumsum(percent))) |>\r\n    set_names(col_names)\r\n}\r\n\r\n# Test the function\r\nvar_sum <- var_summary(penguins, c(species, island, sex))\r\n\r\n\r\n\r\nWhen reading about the tidyselect helper functions I thought it is probably possible to just extract the character vector of column names without the overhead of select-ing all the variables. And exactly for this purpose tidyselect::eval_select() exists. It evaluates a tidyselect expression like for example starts_with(\"bill\") in the context of a dataframe and returns a named integer vector with column names and position:\r\n\r\n\r\n# Capture an expression\r\nexpression <- expr(starts_with(\"bill\"))\r\n\r\n# Evaluating the selection in the dataframe environment\r\ntidyselect::eval_select(expression, data = penguins)\r\n\r\n\r\nbill_length_mm  bill_depth_mm \r\n             3              4 \r\n\r\nThe use of tidyselect::eval_select() leads to a slightly faster implementation of the function.\r\n\r\n\r\n# Creating my custom var_summary function using eval_select()\r\nvar_summary <- function(df, vars) {\r\n  expression <- rlang::enquo(vars)\r\n  col_names <- tidyselect::eval_select(expression, data = df) |>\r\n    names()\r\n  col_names |>\r\n    map(~janitor::tabyl(df, !!sym(.x)) |> \r\n          arrange(desc(n)) |> \r\n          mutate(cum_percent = cumsum(percent))) |>\r\n    set_names(col_names)\r\n}\r\n\r\nvar_sum <- var_summary(penguins, starts_with(\"bill\"))\r\n\r\n\r\n\r\nConclusion\r\nIn the end I created three different functions which did the same job highlighting different possibilities of how to use tidyeval/NSE patterns.\r\n\r\nI‚Äôve written this post so that it provides a place of reference for me to come back to. Furthermore, it might lead to some people having a closer look at this paradigm and test their own ways of implementing Metaprogramming aspects in their workflow (I‚Äôve just touched the surface here). I for myself find it a fascinating aspect of the R programming language which fits nicely into functional programming patterns. At the same time I have to admit, that it is hard to get your head around these ideas and see myself returning to the {rlang} documentation quite often‚Ä¶\r\n\r\nHere is a list with further examples‚Ü©Ô∏é\r\n",
    "preview": "posts/2022-04-20-not-so-standard-evaluations/img/glass.jpg",
    "last_modified": "2022-04-20T12:38:01+02:00",
    "input_file": "not-so-standard-evaluations.knit.md"
  },
  {
    "path": "posts/2022-02-13-tidy-comparisons/",
    "title": "Tidy Comparisons",
    "description": "How to recode largish data in the tidy(table)verse.",
    "author": [
      {
        "name": "Lukas Gr√∂ninger",
        "url": {}
      }
    ],
    "date": "2022-02-13",
    "categories": [
      "R",
      "Benchmark"
    ],
    "contents": "\r\n\r\nContents\r\nThe {tidytable} package\r\nThe Scenario\r\nApproach 1: left_join()\r\nApproach 2: case_when()\r\nSpeed comparison\r\nConclusion\r\n\r\nA common task when when working with data, is the recoding of values. There are many reasons you might want to do that. Maybe you want to create different groups out of one variable or just translate some responses from german to english. In this blogpost I want to demonstrate how this can be achieved in two different ways. Additionally, I will have a look at the {tidytable} package developed by Mark Fairbanks.\r\nI feel quite at home in the tidyverse and had never really felt the necessity to deal with {datatable}. When I came across a tweet discussing {tidytable} I wanted to have a look. The reason why I don‚Äôt use {dtplyr} is that {tidytable} to my knowledge has a better support for tidy evaluation.\r\n\r\nAnother inspiration for this post was this discussion on R-Studio Community on how to quickly recode largish vectors in a tibble.\r\nThe {tidytable} package\r\nTo cite the first lines of the documentation page:\r\nWhy {tidytable}?\r\ntidyverse-like syntax built on top of the fast {data.table} package\r\nCompatibility with the tidy evaluation framework\r\nIncludes functions that dtplyr is missing, including many {tidyr} functions\r\nIf you want to learn more about the package, Bruno Rodriguez has written a great blogpost introducing it. The idea is that {tidytable} functions behave more or less like classic {dplyr} or {tidyr} functions to make it as easy as possible coming from the classic tidyverse. A dot at the end of the function indicates the {tidytable} version (e.g.¬†mutate.() and not mutate()). So let‚Äôs start and load our necessary libraries:\r\n\r\n\r\n# Required libraries\r\nlibrary(tidyverse)\r\nlibrary(tidytable)\r\nlibrary(microbenchmark) \r\n\r\n# Set custom theme for plots\r\nplotutils::set_custom_theme(base_size = 34)\r\n\r\n\r\n\r\nThe Scenario\r\nWe‚Äôve got several dataframes (tibble or tidytable) consisting only of one variable. For simplicity this variable is just composed of the 26 letters of the alphabet. Now I want to recode some of these letters. Like the letters, fruits are chosen here as an example completely arbitrarily. What we want to do is compare the speed of recoding some of these letters when the size of the dataframe increases. This means each dataframe has n rows and we test our different approaches with an increasing size of n. I decided to start with one thousand (1e3) rows and increase the size up to ten million (1e7) rows.\r\n\r\n\r\nn_values <- c(1e3, 1e4, 1e5, 1e6, 1e7)\r\n\r\n\r\n\r\nWhen operating on datasets with a million rows and more speed and efficient computation start to become an issue. I created the lists of dataframes by mapping over the n_values and filling the rows with letters from the alphabet.\r\n\r\n\r\nset.seed(1102)\r\n\r\ntibble_list <- map(n_values, function(.x) {\r\n  tibble(var = sample(letters, size = .x, replace = TRUE))\r\n})\r\n\r\ntidytable_list <- map(n_values, function(.x) {\r\n  tidytable(var = sample(letters, size = .x, replace = TRUE))\r\n})\r\n\r\n\r\n\r\nApproach 1: left_join()\r\nThe first approach I will test is using the left_join() function from the {dplyr} package. It is basically a dictionary or look-up table to recode the values of interest. That‚Äôs why we first create the table with the information which values should be recoded to what. In this made up case an ‚Äúa‚Äù and a ‚Äúc‚Äù should be recoded to ‚Äúapple‚Äù, the ‚Äúb‚Äù, ‚Äúf‚Äù and ‚Äúj‚Äù to ‚Äúbanana‚Äù and so on. As we only want to recode some letters, we fill up the dictionary with the other distinct values in our data. Otherwise we would get an NA value for every letter that does not need to be recoded.\r\n\r\nTo state the obvious _tib stands for tibble or classic tidyverse and _tidyt stands for tidytable.\r\n\r\n\r\n# Create the two dictionaries\r\ndict_tib <- tibble(key = c(\"a\", \"b\", \"c\", \"d\", \"f\", \"j\", \"m\", \"p\", \"u\", \"y\"),\r\n               value = c(\"apple\", \"banana\", \"apple\", \"mango\", \"banana\", \"banana\",\r\n                       \"mango\", \"papaya\", \"pear\", \"cherry\")) |> \r\n  full_join(tibble(key = letters)) |> \r\n  mutate(value = coalesce(value, key))\r\n\r\ndict_tidyt <- tidytable(key = c(\"a\", \"b\", \"c\", \"d\", \"f\", \"j\", \"m\", \"p\", \"u\", \"y\"),\r\n               value = c(\"apple\", \"banana\", \"apple\", \"mango\", \"banana\", \"banana\",\r\n                       \"mango\", \"papaya\", \"pear\", \"cherry\")) |> \r\n  full_join.(tibble(key = letters)) |> \r\n  mutate.(value = coalesce.(value, key))\r\n\r\n\r\n\r\nJust to be consistent I use the with a dot appended {tidytable} functions. The resulting dictionary looks like this:\r\n\r\n\r\ndict_tidyt |> \r\n  paged_table()\r\n\r\n\r\n\r\n\r\n{\"columns\":[{\"label\":[\"key\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"value\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"a\",\"2\":\"apple\"},{\"1\":\"b\",\"2\":\"banana\"},{\"1\":\"c\",\"2\":\"apple\"},{\"1\":\"d\",\"2\":\"mango\"},{\"1\":\"f\",\"2\":\"banana\"},{\"1\":\"j\",\"2\":\"banana\"},{\"1\":\"m\",\"2\":\"mango\"},{\"1\":\"p\",\"2\":\"papaya\"},{\"1\":\"u\",\"2\":\"pear\"},{\"1\":\"y\",\"2\":\"cherry\"},{\"1\":\"e\",\"2\":\"e\"},{\"1\":\"g\",\"2\":\"g\"},{\"1\":\"h\",\"2\":\"h\"},{\"1\":\"i\",\"2\":\"i\"},{\"1\":\"k\",\"2\":\"k\"},{\"1\":\"l\",\"2\":\"l\"},{\"1\":\"n\",\"2\":\"n\"},{\"1\":\"o\",\"2\":\"o\"},{\"1\":\"q\",\"2\":\"q\"},{\"1\":\"r\",\"2\":\"r\"},{\"1\":\"s\",\"2\":\"s\"},{\"1\":\"t\",\"2\":\"t\"},{\"1\":\"v\",\"2\":\"v\"},{\"1\":\"w\",\"2\":\"w\"},{\"1\":\"x\",\"2\":\"x\"},{\"1\":\"z\",\"2\":\"z\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\n  \r\n\r\nNow I can define the functions to later compare in the benchmark test.\r\n\r\n\r\nleft_join_tib <- function(df) {\r\n  df |> \r\n    left_join(dict_tib, by = c(\"var\" = \"key\")) \r\n}\r\n\r\nleft_join_tidyt <- function(df) {\r\n  df |> \r\n    left_join.(dict_tidyt, by = c(\"var\" = \"key\")) \r\n}\r\n\r\n\r\n\r\nApproach 2: case_when()\r\nThe second approach is what I‚Äôm most familiar with and my goto solution when recoding values. It uses the case_when() function inside a mutate call. Here I can easily declare what values should be recoded to.\r\n\r\n\r\nrecode_vals_tib <- function(x) {\r\n  return(case_when(x %in% c(\"a\", \"c\") ~ \"apple\", \r\n                   x %in% c(\"b\", \"f\", \"j\") ~ \"banana\",\r\n                   x %in% c(\"d\", \"m\") ~ \"mango\",\r\n                   x == \"y\" ~ \"cherry\",\r\n                   x == \"p\" ~ \"papaya\",\r\n                   x == \"u\" ~ \"pear\",\r\n                   TRUE ~ x))\r\n}\r\n\r\nrecode_vals_tidyt <- function(x) {\r\n  return(case_when.(x %in% c(\"a\", \"c\") ~ \"apple\", \r\n                    x %in% c(\"b\", \"f\", \"j\") ~ \"banana\",\r\n                    x %in% c(\"d\", \"m\") ~ \"mango\",\r\n                    x == \"y\" ~ \"cherry\",\r\n                    x == \"p\" ~ \"papaya\",\r\n                    x == \"u\" ~ \"pear\",\r\n                    TRUE ~ x))\r\n}\r\n\r\n\r\n\r\nAs with the second approach I create the function with a dataframe as an input to compare in the benchmark test. The small dot at the end of the functions indicates the subtle difference.\r\n\r\n\r\ncase_when_tib <- function(df) {\r\n  df |> \r\n    mutate(var = recode_vals_tib(var))\r\n}\r\n\r\ncase_when_tidyt <- function(df) {\r\n  df |> \r\n    mutate.(var = recode_vals_tidyt(var))\r\n}\r\n\r\n\r\n\r\nSpeed comparison\r\nSource: www.pexels.comNow we will use the {microbenchmark} package to compare the difference in speed when recoding values depending on the selected approach.\r\n\r\n\r\nresult <- map2_df(.x = tibble_list, .y = tidytable_list,\r\n               .f = function(.x, .y) {\r\n                 microbenchmark(\r\n                   left_join_tib(.x),\r\n                   left_join_tidyt(.y),\r\n                   case_when_tib(.x),\r\n                   case_when_tidyt(.y),\r\n                   times = 50) |> \r\n                 group_by(expr) |> \r\n                 summarize(median_time = median(time, na.rm = TRUE))\r\n                 })\r\n\r\n\r\n\r\nI use the map2_df() function and give the two created lists of dataframes as an input. For each approach I test the classic tidyverse approach against the tidytable version. Afterwards I extract the median time it took. To compare the functions I plot them on a logarithmic scale on both axes.\r\n\r\n\r\nresult |> \r\n  mutate(n_rows = rep(n_values, each = 4),\r\n         median_time = median_time*1e-9) |> \r\n  ggplot(aes(x = n_rows, y = median_time, colour = expr)) +\r\n  scale_x_continuous(trans = \"log10\", labels = scales::label_number(big.mark = \",\")) +\r\n  scale_y_log10() +\r\n  geom_point(size = 2) +\r\n  geom_line(size = 1.4) +\r\n  scale_colour_viridis_d() +\r\n  labs(title = \"Speed Comparison\", \r\n       subtitle = \"X and Y Axis log transformed\",\r\n       colour = NULL,\r\n       x = \"Number of rows\",\r\n       y = \"Seconds\")\r\n\r\n\r\n\r\n\r\nWe can easily see that the {tidytable} functions outperform the classic tidyverse functions. The difference becomes more prominent when we keep the y-axis untransformed.\r\n\r\n\r\nresult |> \r\n  mutate(n_rows = rep(n_values, each = 4),\r\n         median_time = median_time*1e-9) |> \r\n  ggplot(aes(x = n_rows, y = median_time, colour = expr)) +\r\n  scale_x_continuous(trans = \"log10\", labels = scales::label_number(big.mark = \",\")) +\r\n  geom_point(size = 2) +\r\n  geom_line(size = 1.4) +\r\n  scale_colour_viridis_d() +\r\n  labs(title = \"Speed Comparison\", \r\n       subtitle = \"X Axis log transformed\",\r\n       colour = NULL,\r\n       x = \"Number of rows\",\r\n       y = \"Seconds\")\r\n\r\n\r\n\r\n\r\nConclusion\r\nFor the case of 10 million rows the dplyr::case_when() approach took around 3 seconds whereas the fastest approach was the tidytable::left_join() approach with \\(0.46\\) seconds (more than 6 times the difference). When compared directly the dplyr::left_join() took at 1 million rows \\(45.5\\%\\) and at 10 million rows \\(31.5\\%\\) longer than the {tidytable} alternative.\r\nIn general the results show that when operating with dataframes of around 10 thousand rows the differences are negligible. Only when the data you are dealing with becomes significantly larger (more than 1 million rows) it is more reasonable to use the {tidytable} alternative. Furthermore, the left_join() variant is probably a bit cleaner or better to manage as you store the dictionary in a separate table. The great thing about {tidytable} is that the switch is so easy.\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-02-13-tidy-comparisons/img/tidy_table.jpg",
    "last_modified": "2022-02-16T10:50:41+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-02-01-keep-up-your-standards/",
    "title": "Keep up your Standards",
    "description": "How to set up default files to nudge you in the right direction.",
    "author": [
      {
        "name": "Lukas Gr√∂ninger",
        "url": {}
      }
    ],
    "date": "2022-02-01",
    "categories": [
      "R",
      "R-Studio"
    ],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nWhat are good standards?\r\nCreating default R templates\r\nThe next step\r\nConclusion\r\n\r\nIntroduction\r\nThis post is about setting up new standard R and R-Markdown files to help you benefit from the default effect. This effect makes use of the fact that people are inherently lazy. We suffer from the status quo bias. That means we tend to leave things as they are. This is why we just agree to General Terms and Conditions and accept all cookie tracking on websites. Companies and organizations are well aware of this flaw of ours and take advantage of it. This means we can leverage this behaviour as well to e.g.¬†improve our code documentation. It is good practice to design decision architectures to ‚ÄúImproving decisions about health, wealth, and happiness‚Äù (Thaler and Sunstein 2009).\r\n\r\nYou will find lots of literature on the topic in the field of behavioural economics. Prominent authors are Daniel Kahnemann (Thinking, fast and slow) and Richard Thaler (Nudge)\r\nWhat are good standards?\r\nCode documentation is crucial for:\r\nMaintainability\r\nReproducibility\r\nGeneral knowledge transfer\r\n\r\nWhen we create a new script we often don‚Äôt bother to give it a title, date or a short description about it‚Äôs purpose and further information. After all, we know exactly what we need it for, right? The problem is that this is not the case in 4 or 5 months from now. And even less if someone else wants to understand why this script exists. But we can set ourselves up for success by using smart default templates.\r\nDisclaimer:\r\nI will demonstrate how to change the default templates on a Windows machine using RStudio. The process for Macs and another IDE will look different.\r\nCreating default R templates\r\nCurrently when we go to New File -> R Script or type Ctrl+Shift+N we see an empty script. To change that we have to create a templates folder first. In this new folder we‚Äôll create a new default.R file. Now we can edit this file as we like.\r\n\r\n\r\n# Required libraries\r\nlibrary(fs)\r\nlibrary(usethis)\r\n\r\n# Create a templates folder\r\ndir_create(path = \"~/AppData/Roaming/RStudio/templates\")\r\n\r\n# Create the file, here we start with a normal R script\r\nfile_create(\"~/AppData/Roaming/RStudio/templates/default.R\")\r\n\r\n# Open the file in RStudio to edit it\r\nedit_file(\"~/AppData/Roaming/RStudio/templates/default.R\")\r\n\r\n\r\n\r\nIt is helpful to specify some meta information like Author, E-Mail or Date especially when these scripts are being shared with others. Another aspect is to use the code folding feature (shown in line 11).\r\nThe result might look like this:\r\nModify default.RWe can do now the same for R-Markdown files. The procedure is the same.\r\n\r\n\r\n# Now we do the same with an RMarkdown Script\r\nfile_create(\"~/AppData/Roaming/RStudio/templates/default.Rmd\")\r\n\r\n# And open the file in RStudio again\r\nedit_file(\"~/AppData/Roaming/RStudio/templates/default.Rmd\")\r\n\r\n\r\n\r\nHere the template is somewhat more verbose. Often you know what things you enter repeatedly. These templates may look different for everyone.\r\nModify default.RmdThe next step\r\nYou can not only create default templates for your local machine. The next step would be to create an R package for the sole purpose of containing a set of standardized default templates for e.g.¬†your organization or your team. Let‚Äôs imagine you work in a company and you want to create specific reports on a regular basis. This would be a good use case to create a template for that.\r\nHere is a great resource for doing that. I used it to create the {TestTemplates} package. Now everyone can just install the package and be able to use your templates.\r\nTestTemplates PackageConclusion\r\nIn this post I went through the process of setting up default R templates. They do not ensure that all at once your code structure will be perfect. The idea is to reflect and work out how standards should be constructed for your particular case. The purpose of these templates is only to nudge us in the right direction towards a good code structure as well as programming practices.\r\n\r\n\r\n\r\nThaler, Richard H., and Cass R. Sunstein. 2009. Nudge: Improving Decisions about Health, Wealth, and Happiness. New York: Penguin Books.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-02-01-keep-up-your-standards/img/standard_1.jpg",
    "last_modified": "2022-01-31T18:01:13+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-01-10-scraping-used-boats/",
    "title": "Scraping used boats",
    "description": "How to find the perfect sailing yacht.",
    "author": [
      {
        "name": "Lukas Gr√∂ninger",
        "url": {}
      }
    ],
    "date": "2022-01-10",
    "categories": [
      "R",
      "Webscraping"
    ],
    "contents": "\r\n\r\nContents\r\nWeb Scraping\r\nData Cleaning\r\nFurther steps\r\nGeographical Representation\r\nConclusion\r\n\r\nIn the last post I described how to use an API to download financial data. In this post I want to talk about accessing data from the web when we don‚Äôt have the luxury of using an API. Maybe there is an interface, but it is not publicly available. Or there is none and we still want to extract data. The concept we will use here is called Web Scraping. It is about collecting structured web data in an automated way. The example to demonstrate this process will be the website www.boat24.com.\r\n\r\nIt is a european two sided marketplace to purchace or sell used sailing or motorboats. I‚Äôve worked on ships for some years and enjoy going sailing during vacation. And so sometimes I end up looking at used sailboats on the Internet‚Ä¶ Today the goal is to scrape information from this site.\r\nLet‚Äôs have a look:\r\nSource: www.boat24.com/en/sailboats/We filtered for sailboats and see a list of boats and additional information. The total number of listings is 3296 boats. The general setup of the page is already quite good for our task.\r\nWeb Scraping\r\nNow I want to access information about the inventory of this marketplace. We can do this by investigating the structure of the website of interest.\r\n\r\nMake sure that it‚Äôs okay to scrape the site by looking at their robots.txt file.\r\nThis means answering questions like - How is the content and the information loaded and displayed and what other requests are made in the background? We do this by having a look at the Developer Tools Panel (if you are using a Chrome Browser). On Windows this opens up after typing Control+Shift+C. We will use it to inspect the different elements and extract and parse the relevant html/xml.\r\nThe libraries we‚Äôll need to perform the process of extracting information from a web page are the following:\r\n\r\n\r\nlibrary(tidyverse)  # Main data wrangling\r\nlibrary(rvest)      # Web scraping library\r\nlibrary(xml2)       # XML Parsing \r\nlibrary(lubridate)  # Handling dates\r\nlibrary(sf)\r\n\r\n# Setting theme\r\nplotutils::set_custom_theme(base_size = 26)\r\n\r\n\r\n\r\nWe start by scrolling through the boats and click on a link in order to see a more detailed view of the specific boat listing. We see pictures of the boat and further information in a table below. When hovering over this table we see the section is called ‚Äúspecs‚Äù.\r\nSpecs TagWe are definitely interested in extracting this information. To identify this table we can right click and copy the xpath. But first we will set up our R script. We see that on every page there are\r\n20 boats listed. The starting url from where we‚Äôll navigate this site will therefore be https://www.boat24.com/en/sailboats/?page=0&sort=datdesc.\r\n\r\n\r\n# Starting url\r\nurl <- \"https://www.boat24.com/en/sailboats/?page=0&sort=datdesc\"\r\n\r\n# Starting page number\r\npage_num <- 0\r\n\r\n\r\n\r\nAfterwards we‚Äôll initialize our dataframe with all the variables of interest that we want to extract.\r\n\r\n\r\n# Initialize Dataframe (for the moment only char-variables, will be cleaned later)\r\nboat_df <- tibble(id = character(),\r\n                  type = character(),\r\n                  price = character(),\r\n                  condition = character(),\r\n                  manufacturer = character(),\r\n                  model = character(),\r\n                  region = character(),\r\n                  location = character(),\r\n                  year = character(),\r\n                  length_width = character(),\r\n                  draft = character(),\r\n                  displacement = character(),\r\n                  material = character(),\r\n                  steering = character(),\r\n                  keel_type = character(),\r\n                  ballast = character(),\r\n                  no_persons = character(),\r\n                  headroom = character(),\r\n                  no_cabins = character(),\r\n                  no_beds = character(),\r\n                  propulsion = character(),\r\n                  engine_perf = character(),\r\n                  fuel_type = character(),\r\n                  fuel_cap = character(),\r\n                  engine_hours = character(),\r\n                  mainsail = character(),\r\n                  genoa = character(),\r\n                  spinnaker = character(),\r\n                  ad_date = character(),\r\n                  no_views = character(),\r\n                  no_favs = character())\r\n\r\n\r\n\r\nThe process looks like this:\r\nStart with the landing page and find the list of boat links.\r\nAccess each of these pages and extract relevant information.\r\nGo to the next page (increase the page_num by 20) and repeat.\r\nI will break it down into several steps.\r\n\r\n# Start while loop with page_num = Number of Boats displayed at the top left                \r\nwhile (page_num < 3280) {\r\n  \r\n  website <- read_html(url)\r\n  # Extract boatlist of website\r\n  boat_list <- website  |>  \r\n    html_nodes(xpath = \"/html/body/main/section[2]/div/ul/li\")\r\n\r\nWe‚Äôll use the read_html() function from the {rvest} package to extract all of the html. with html_nodes() we can specify which segment we want to read. We are interested in the links of the detail pages of the boats. With the help of the developer tool view we can select the element of interest, right click and copy the xpath. In the case of the specs table this was ‚Äú//*[@id='specs']‚Äú. For the ID, the price or the number of views, there are different xpaths which can be found by inspecting the elements of the site.\r\nIn order to extract the relevant information we need to use some regular expressions (regex). To extract the condition of the boat we use for example a lookahead ‚Äú[^\\n]+(?=Condition?)‚Äù.\r\n\r\n# Loop through the 20 boats on the list\r\n  for (i in seq_along(boat_list)) {\r\n    \r\n    boat_link <- xml_attrs(xml_child(boat_list[[i]], 1))[2]  \r\n    # There are some google ads which have to be filtered by this if statement\r\n    if (str_sub(boat_link, start = 1L, end = 22L) == \"https://www.boat24.com\") {\r\n      \r\n      boat_link_site <- read_html(boat_link)\r\n      # Read out the variables of interest with xpath or classes\r\n      specs_table <- html_nodes(boat_link_site, \r\n                                xpath = \"//*[@id='specs']\") %>% html_text()\r\n      \r\n      id <- html_nodes(\r\n        boat_link_site, \r\n        xpath = \"//*[@id='sticky-header-trigger']/div/div/aside/section[2]/ul[1]/li[1]/strong\")  |>  \r\n        html_text() \r\n      type <- html_nodes(\r\n        boat_link_site, \r\n        xpath = \"//*[@id='specs']/header/p[1]/a[1]\") |>  \r\n        html_text() \r\n      price <- html_nodes(\r\n        boat_link_site, \r\n        xpath = \"//*[@id='contact']/div[1]/p[1]/strong\")  |>  \r\n        html_text()  \r\n      region <- html_nodes(\r\n        boat_link_site, \r\n        xpath = \"//*[@id='location']/p/text()\") |>  \r\n        html_text() \r\n      location <- html_nodes(\r\n        boat_link_site, \r\n        xpath = \"//*[@id='location']/p/strong\") |>  \r\n        html_text() \r\n\r\n      condition <- str_extract(specs_table, \"[^\\n]+(?=Condition?)\")\r\n      manufacturer <- str_extract(specs_table, \"[^\\n]+(?=Manufacturer?)\")\r\n      model <- str_extract(specs_table, \"[^\\n]+(?=Model?)\")\r\n      year <- str_extract(specs_table, \"\\\\d+(?=Year Built?)\")\r\n      length_width <- str_extract(specs_table, \"[^\\n]+(?=Length x Width?)\")\r\n      draft <- str_extract(specs_table, \"[^\\n]+(?=Draft?)\")\r\n      displacement <- str_extract(specs_table, \"[^\\n]+(?=Displacement?)\")\r\n      material <- str_extract(specs_table, \"[^\\n]+(?=Material?)\") \r\n      steering <- str_extract(specs_table, \"[^\\n]+(?=Steering?)\")\r\n      keel_type <- str_extract(specs_table, \"[^\\n]+(?=Keel Type?)\")\r\n      ballast <- str_extract(specs_table, \"[^\\n]+(?=Ballast?)\")\r\n      no_persons <- str_extract(specs_table, \"[^\\n]+(?=Certified No. of Persons?)\")\r\n      headroom <- str_extract(specs_table, \"[^\\n]+(?=Headroom?)\")\r\n      no_cabins <- str_extract(specs_table, \"[^\\n]+(?=No. of Cabins?)\")\r\n      no_beds <- str_extract(specs_table, \"[^\\n]+(?=No. of Beds?)\")\r\n      propulsion <- str_extract(specs_table, \"[^\\n]+(?=Propulsion?)\")\r\n      engine_perf <- str_extract(specs_table, \"[^\\n]+(?=Engine Performance?)\")\r\n      fuel_type <- str_extract(specs_table, \"[^\\n]+(?=Fuel Type?)\")\r\n      fuel_cap <- str_extract(specs_table, \"[^\\n]+(?=Fuel Capacity?)\")\r\n      engine_hours <- str_extract(specs_table, \"[^\\n]+(?=Engine Hours?)\")\r\n      mainsail <- str_extract(specs_table, \"[^\\n]+(?=Mainsail?)\")\r\n      genoa <- str_extract(specs_table, \"[^\\n]+(?=Genoa?)\")\r\n      spinnaker <- str_extract(specs_table, \"[^\\n]+(?=Spinnaker?)\")\r\n      \r\n      ad_date <- html_nodes(\r\n        boat_link_site, \r\n        xpath = \"//*[@id='sticky-header-trigger']/div/div/aside/section[2]/ul[1]/li[2]/strong\") |>  \r\n        html_text() \r\n      no_views <- html_nodes(\r\n        boat_link_site, \r\n        xpath = \"//*[@id='sticky-header-trigger']/div/div/aside/section[2]/ul[1]/li[3]/strong\") |>  \r\n        html_text() \r\n      no_favs <- html_nodes(\r\n        boat_link_site, \r\n        xpath = \"//*[@id='sticky-header-trigger']/div/div/aside/section[2]/ul[1]/li[4]/strong\") |>  \r\n        html_text()\r\n\r\nAfter having stored all information in variables we fill them in a dataframe/tibble. For some boats there were missing variables which had to be coded as NA. We can write a short function to do that.\r\n\r\n\r\n# Function to select only the first element, if empty --> NA\r\ncheck_input <- function(x) if (is_empty(x)) NA else x[[1]]\r\n\r\n\r\n\r\n\r\n      extracted_vars <- list(id, type, price, condition, manufacturer, model, region,\r\n                             location, year, length_width, draft, displacement,\r\n                             material, steering, keel_type, ballast, no_persons,\r\n                             headroom, no_cabins, no_beds, propulsion, engine_perf,\r\n                             fuel_type, fuel_cap, engine_hours, mainsail, genoa,\r\n                             spinnaker, ad_date, no_views, no_favs)\r\n\r\n      df <- extracted_vars |> \r\n        set_names(colnames(boat_df)) |> \r\n        map_df(check_input) \r\n      \r\n    }\r\n    # Rowbind the dataframe \r\n    boat_df <- bind_rows(boat_df, df)\r\n  }\r\n\r\nAfterwards the dataframe is appended to our previously created one. Then we have to increase the page_num counter and go to the next page.\r\n\r\n# Jump to the next page in steps of 20 (boats per page)\r\n  page_num <- page_num + 20\r\n  url <- paste0(\"https://www.boat24.com/en/sailboats/?page=\", \r\n                as.character(page_num), \"&sort=datdesc\")\r\n}\r\n\r\nIn the end we can save our final dataframe as a csv or any other file format. Now we‚Äôll look at the first entries of our data:\r\n\r\n\r\nboat_df |> \r\n  head(3) |> \r\n  paged_table()\r\n\r\n\r\n\r\n\r\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"price\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"condition\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"manufacturer\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"model\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"region\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"location\"],\"name\":[8],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[9],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"length_width\"],\"name\":[10],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"draft\"],\"name\":[11],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"displacement\"],\"name\":[12],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"material\"],\"name\":[13],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"steering\"],\"name\":[14],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"keel_type\"],\"name\":[15],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"ballast\"],\"name\":[16],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"no_persons\"],\"name\":[17],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"headroom\"],\"name\":[18],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"no_cabins\"],\"name\":[19],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"no_beds\"],\"name\":[20],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"propulsion\"],\"name\":[21],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"engine_perf\"],\"name\":[22],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"fuel_type\"],\"name\":[23],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"fuel_cap\"],\"name\":[24],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"engine_hours\"],\"name\":[25],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"mainsail\"],\"name\":[26],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"genoa\"],\"name\":[27],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"spinnaker\"],\"name\":[28],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"ad_date\"],\"name\":[29],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"no_views\"],\"name\":[30],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"no_favs\"],\"name\":[31],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"289862\",\"2\":\"Sailing Yacht\",\"3\":\"EUR 80.000,-\",\"4\":\"good condition\",\"5\":\"Najad\",\"6\":\"Aphrodite 36\",\"7\":\"Italy ¬ª Sicilia ¬ª\",\"8\":\"Lipari- prossimamente a Procida\",\"9\":\"1988\",\"10\":\"10.95 m x 3.50 m\",\"11\":\"1.00 - 1.40 m\",\"12\":\"9'000 kg\",\"13\":\"GRP\",\"14\":\"Wheel control\",\"15\":\"Long Keel\",\"16\":\"NA\",\"17\":\"7 Persons\",\"18\":\"NA\",\"19\":\"2 Cabins\",\"20\":\"7 beds\",\"21\":\"Saildrive\",\"22\":\"1 x 35 HP / 26 kW\",\"23\":\"Diesel\",\"24\":\"150 l\",\"25\":\"2'000 h\",\"26\":\"25 m¬≤\",\"27\":\"25 m¬≤\",\"28\":\"35 m¬≤\",\"29\":\"10.12.2021\",\"30\":\"1'148\",\"31\":\"27\"},{\"1\":\"480117\",\"2\":\"Sailing Yacht\",\"3\":\"EUR 250.000,-\",\"4\":\"As new\",\"5\":\"Dehler\",\"6\":\"38\",\"7\":\"Germany ¬ª Ostsee ¬ª\",\"8\":\"Stralsund\",\"9\":\"2016\",\"10\":\"11.64 m x 3.75 m\",\"11\":\"2.03 m\",\"12\":\"7'500 kg\",\"13\":\"GRP\",\"14\":\"Dual Wheel Control\",\"15\":\"Bulb Keel\",\"16\":\"NA\",\"17\":\"8 Persons\",\"18\":\"NA\",\"19\":\"3 Cabins\",\"20\":\"8 beds\",\"21\":\"Saildrive\",\"22\":\"1 x 38 HP / 28 kW\",\"23\":\"Diesel\",\"24\":\"160 l\",\"25\":\"536 h\",\"26\":\"80 m¬≤ (Battened Mainsail)\",\"27\":\"NA\",\"28\":\"NA\",\"29\":\"12.12.2021\",\"30\":\"743\",\"31\":\"33\"},{\"1\":\"483884\",\"2\":\"Cruising Yacht\",\"3\":\"EUR 296.500,-\",\"4\":\"good condition\",\"5\":\"van de Stadt\",\"6\":\"Tasman 48\",\"7\":\"Spain ¬ª Costa del Sol ¬ª\",\"8\":\"Almerimar\",\"9\":\"1996\",\"10\":\"14.97 m x 4.49 m\",\"11\":\"2.40 m\",\"12\":\"20'170 kg\",\"13\":\"Steel\",\"14\":\"Dual Wheel Control\",\"15\":\"Long Keel\",\"16\":\"5'700 kg\",\"17\":\"8 Persons\",\"18\":\"200 cm\",\"19\":\"3 Cabins\",\"20\":\"8 beds\",\"21\":\"Inboard Direct-Drive\",\"22\":\"1 x 160 HP / 118 kW\",\"23\":\"Diesel\",\"24\":\"1'120 l\",\"25\":\"1'958 h\",\"26\":\"90 m¬≤ (Battened Mainsail)\",\"27\":\"60 m¬≤ (Roller Furling)\",\"28\":\"180 m¬≤\",\"29\":\"15.10.2021\",\"30\":\"919\",\"31\":\"29\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\n  \r\n\r\nFor simplicity the variables are all encoded as character. The next step is to clean the data.\r\nData Cleaning\r\nThe main function to clean the data is the readr::parse_number() function. With across() we can apply this function to several variables. Another aspect is the fact that the prices are not displayed in a consistent format. That‚Äôs why I had to extract the currency and convert all prices in Euro.\r\n\r\n\r\ncleaned_df <- boat_df |>  \r\n  drop_na(id) |> \r\n  distinct(id, .keep_all = TRUE) |> \r\n  separate(col = engine_perf, into = c(\"no_eng\", \"hp_eng\"), sep = \"x\") |>  \r\n  separate(col = length_width, into = c(\"length\", \"width\"), sep = \"x\") |> \r\n  mutate(currency = str_sub(price, 1, 1),\r\n         price = parse_number(price, \r\n                              locale = locale(decimal_mark = \",\", \r\n                                              grouping_mark = \".\")),\r\n         hp_eng = str_extract(hp_eng, pattern = \"(\\\\d)+(?= HP)\"),\r\n         displacement = parse_number(displacement,\r\n                                     locale = locale(grouping_mark = \"'\")),\r\n         across(.cols = c(no_persons, draft, no_cabins, no_beds, headroom, fuel_cap, \r\n                engine_hours, no_views, no_favs, ballast, mainsail, genoa, year,\r\n                spinnaker, no_eng, hp_eng, length, width),\r\n                .fns = parse_number),\r\n         region = case_when(str_detect(region, \"United Kingdom\") ~ \"United_Kingdom\",\r\n                            str_detect(region, \"United States\") ~ \"USA\",\r\n                            TRUE ~ region),\r\n         country = str_extract(region, pattern = \"\\\\w+\"),\r\n         price = case_when(currency == \"¬£\" ~ price*1.18,\r\n                           currency == \"C\" ~ price*0.9,\r\n                           currency == \"D\" ~ price*0.13,\r\n                           currency == \"E\" ~ price*1,\r\n                           currency == \"S\" ~ price*0.1,\r\n                           currency == \"U\" ~ price*0.85,\r\n                           TRUE ~ NA_real_),\r\n         ad_date = dmy(ad_date))\r\n\r\n\r\n\r\nFurther steps\r\nNow we could do some analysis, picking our favorite boat etc. We could calculate statistics of which boats get the most views or are getting marked as favorites most often. We could try to answer questions like - Does the country where I sell my boat has an impact on the price? and so on.\r\nGeographical Representation\r\nAt last I will give a geographical view on how many boats are listed in different european countries. Here I use a dataframe where I scraped information from not only sailing but motorboats as well. To plot it on a map, there are packages like rnaturalearth or spData which offer datasets for spatial analysis. There are lots of great tutorials which show how to do that. I work with simple Features (sf) objects and {ggplot2}.\r\n\r\n\r\nggplot() +\r\n  geom_sf(data = df_e, aes(fill = n_listings)) +\r\n  coord_sf(xlim = c(-15, 45), ylim = c(32, 70), expand = FALSE) +\r\n  scale_fill_viridis_c(direction = -1) +\r\n  labs(fill = \"Number of listings\") +\r\n  guides(fill = guide_colorbar(title.position = \"top\", \r\n                                title.hjust = .5, \r\n                                barwidth = 10, \r\n                                barheight = 1))\r\n\r\n\r\n\r\n\r\nWe can directly see that this marketplace focuses mainly on the german/swiss market. The portfolio of boats outside of Central/Western Europe is negligible.\r\nConclusion\r\nIn this post I wanted to show how to scrape information from a webpage. It is a useful skill to be able to analyze the structure of websites and see how they are built. I went with the Boat24.com example as I am interested in sailing yachts but the use cases are quite diverse. The Internet offers the largest source of data and with Webscraping it can be accessed. You could use it to compare prices of products on different websites, monitor competitors or just for general research tasks.\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-01-10-scraping-used-boats/img/used_boats.jpg",
    "last_modified": "2022-01-31T17:55:42+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-15-apis-and-parameterized-reports/",
    "title": "API's and parameterized reports",
    "description": "How to access the SimFin API for financial reporting.",
    "author": [
      {
        "name": "Lukas Gr√∂ninger",
        "url": {}
      }
    ],
    "date": "2021-12-15",
    "categories": [
      "R",
      "API",
      "reporting"
    ],
    "contents": "\r\n\r\nContents\r\nAPI‚Äôs\r\nSimFin\r\nAccessing an API\r\nThe {simfinapi} package\r\n\r\nReporting with R\r\nStock prices over the year\r\nCreating your own metric\r\n\r\nConclusion\r\n\r\nAPI‚Äôs\r\nAPI‚Äôs (Application Programming Interfaces) are crucial when it comes to applications or systems communicating with each other. Today they are everywhere around us and I guess we cannot imagine a world without them. We are interacting with API‚Äôs several times a day e.g.¬†when we are using Google Maps or sending out a tweet.\r\nSource: www.pexels.comIn the past years many organizations have decided to use an API-first approach for their projects. I will not go into detail about what exactly an API is or how it works. There are many resources explaining it (here for example).\r\nIn this blogpost I want to first show how to access the SimFin API and therefore gain access to financial information of more than 3000 public companies. Second I will demonstrate how to create your own financial (or any other) report.\r\nSimFin\r\nSimFin stands for simplifying finance and is an organization that provides fundamental financial data about public companies for everyone. In order to get an API-key and download data you need to register with a mail account first. It is recommended to store the API-key in an environment variable. Here is an article that describes how to do that. After having done that you are good to go.\r\nAccessing an API\r\nFirst we‚Äôll load all necessary libraries.\r\n\r\n\r\n# required libraries\r\nlibrary(tidyverse) \r\nlibrary(here)\r\nlibrary(simfinapi)\r\nlibrary(httr2)      # communicating with API's through R\r\nlibrary(lubridate)  # Handling dates\r\nlibrary(gt)         # Pretty tables\r\nlibrary(gtExtras)\r\n\r\n# Setting theme\r\nplotutils::set_custom_theme(base_size = 30)\r\n\r\n\r\n\r\nOn the simfin website you will find a link to their Web API documentation. We start with an easy example of communicating with the API where we‚Äôll request a list of available companies and their SimFinId.\r\nFirst we‚Äôll store our API-key in a variable and create our url (web-address) with which we want to talk to. This information is available in the documentation.\r\n\r\n\r\nmy_apikey <- Sys.getenv(\"SIMFIN_KEY\")\r\n\r\nbase_url <- \"https://simfin.com/api/v2/\"\r\n\r\nendpoint <- \"companies/list\"\r\n\r\n# Create url\r\nurl <- paste0(base_url, endpoint, \"?api-key=\", my_apikey)\r\n\r\n\r\n\r\nNow we could just copy paste this url in our browser and see the result:\r\nInserting our url in the browserBut fortunately there is a more elegant R package for communicating with API‚Äôs. The {httr2} package is an advancement of the {httr} package developed by Hadley Wickham.\r\n\r\n\r\n# create the request\r\nreq <- request(url) |> \r\n  req_perform()\r\n\r\n# Check if it worked\r\nresp_status(req)\r\n\r\n\r\n[1] 200\r\n\r\nGlad to see that the request worked. Now we want to parse it‚Äôs raw output. In our case this is done via the resp_bod_json() function (as we are dealing with json data - see the browser output). Then we are converting it to a dataframe/tibble.\r\n\r\n\r\ncontent_json <- resp_body_json(req) \r\n\r\ncontent_df <- tibble(simfin_id = map_dbl(content_json$data, 1),\r\n                     ticker = map_chr(content_json$data, 2))\r\n\r\n\r\n\r\nLet‚Äôs have a look at the first few rows of our dataframe of available companies:\r\n\r\n\r\nhtml {\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\r\n}\r\n\r\n#vksvehytnt .gt_table {\r\n  display: table;\r\n  border-collapse: collapse;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: #333333;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  background-color: #FFFFFF;\r\n  width: auto;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #A8A8A8;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #A8A8A8;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n}\r\n\r\n#vksvehytnt .gt_heading {\r\n  background-color: #FFFFFF;\r\n  text-align: center;\r\n  border-bottom-color: #FFFFFF;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#vksvehytnt .gt_title {\r\n  color: #333333;\r\n  font-size: 125%;\r\n  font-weight: initial;\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n  border-bottom-color: #FFFFFF;\r\n  border-bottom-width: 0;\r\n}\r\n\r\n#vksvehytnt .gt_subtitle {\r\n  color: #333333;\r\n  font-size: 85%;\r\n  font-weight: initial;\r\n  padding-top: 0;\r\n  padding-bottom: 6px;\r\n  border-top-color: #FFFFFF;\r\n  border-top-width: 0;\r\n}\r\n\r\n#vksvehytnt .gt_bottom_border {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#vksvehytnt .gt_col_headings {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#vksvehytnt .gt_col_heading {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 6px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#vksvehytnt .gt_column_spanner_outer {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n}\r\n\r\n#vksvehytnt .gt_column_spanner_outer:first-child {\r\n  padding-left: 0;\r\n}\r\n\r\n#vksvehytnt .gt_column_spanner_outer:last-child {\r\n  padding-right: 0;\r\n}\r\n\r\n#vksvehytnt .gt_column_spanner {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  overflow-x: hidden;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n#vksvehytnt .gt_group_heading {\r\n  padding: 8px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#vksvehytnt .gt_empty_group_heading {\r\n  padding: 0.5px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#vksvehytnt .gt_from_md > :first-child {\r\n  margin-top: 0;\r\n}\r\n\r\n#vksvehytnt .gt_from_md > :last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n#vksvehytnt .gt_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  margin: 10px;\r\n  border-top-style: solid;\r\n  border-top-width: 1px;\r\n  border-top-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#vksvehytnt .gt_stub {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-right-style: solid;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  padding-left: 12px;\r\n}\r\n\r\n#vksvehytnt .gt_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#vksvehytnt .gt_first_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#vksvehytnt .gt_grand_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#vksvehytnt .gt_first_grand_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: double;\r\n  border-top-width: 6px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#vksvehytnt .gt_striped {\r\n  background-color: rgba(128, 128, 128, 0.05);\r\n}\r\n\r\n#vksvehytnt .gt_table_body {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#vksvehytnt .gt_footnotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#vksvehytnt .gt_footnote {\r\n  margin: 0px;\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#vksvehytnt .gt_sourcenotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#vksvehytnt .gt_sourcenote {\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#vksvehytnt .gt_left {\r\n  text-align: left;\r\n}\r\n\r\n#vksvehytnt .gt_center {\r\n  text-align: center;\r\n}\r\n\r\n#vksvehytnt .gt_right {\r\n  text-align: right;\r\n  font-variant-numeric: tabular-nums;\r\n}\r\n\r\n#vksvehytnt .gt_font_normal {\r\n  font-weight: normal;\r\n}\r\n\r\n#vksvehytnt .gt_font_bold {\r\n  font-weight: bold;\r\n}\r\n\r\n#vksvehytnt .gt_font_italic {\r\n  font-style: italic;\r\n}\r\n\r\n#vksvehytnt .gt_super {\r\n  font-size: 65%;\r\n}\r\n\r\n#vksvehytnt .gt_footnote_marks {\r\n  font-style: italic;\r\n  font-weight: normal;\r\n  font-size: 65%;\r\n}\r\nAvailable companies\r\n    simfin_id\r\n      ticker\r\n    854465\r\n1COV.DE45846\r\nA1253413\r\nA181205636\r\nA20367153\r\nAA939324\r\nAAC_delist68568\r\nAAL\r\n\r\nAfter scrolling through the first entries we recognize the AAPL ticker belonging to Apple. Now we‚Äôll have a closer look at this company and extend our request with more fields.\r\n\r\n\r\n# Define ticker. We want to have a look at Apple\r\nticker <- \"AAPL\"\r\n\r\n# the statement to retrieve. (profit/loss)\r\nstatement <- \"pl\"\r\n\r\n# the period & financial year to retrieve\r\nperiod <- \"q4\"\r\nfyear <- 2021\r\n\r\n# create url\r\nurl <- paste0(base_url, \"companies/statements?api-key=\", my_apikey, \"&ticker=\", ticker, \r\n              \"&statement=\", statement, \"&period=\", period,\"&fyear=\", fyear)\r\n\r\n# make request\r\napple_req <- request(url) |> \r\n  req_perform()\r\n\r\n# convert JSON\r\napple_json <- resp_body_json(apple_req)[[1]]\r\n\r\napple_df <- tibble(variable = map_chr(apple_json$columns, 1),\r\n                   value = map_chr(apple_json$data[[1]], 1, .null = NA_character_))\r\n\r\n\r\n\r\nNow we can inspect some information for Apple‚Äôs last quarter.\r\n\r\n\r\nhtml {\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\r\n}\r\n\r\n#hieiepgvox .gt_table {\r\n  display: table;\r\n  border-collapse: collapse;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: #333333;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  background-color: #FFFFFF;\r\n  width: auto;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #A8A8A8;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #A8A8A8;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n}\r\n\r\n#hieiepgvox .gt_heading {\r\n  background-color: #FFFFFF;\r\n  text-align: center;\r\n  border-bottom-color: #FFFFFF;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#hieiepgvox .gt_title {\r\n  color: #333333;\r\n  font-size: 125%;\r\n  font-weight: initial;\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n  border-bottom-color: #FFFFFF;\r\n  border-bottom-width: 0;\r\n}\r\n\r\n#hieiepgvox .gt_subtitle {\r\n  color: #333333;\r\n  font-size: 85%;\r\n  font-weight: initial;\r\n  padding-top: 0;\r\n  padding-bottom: 6px;\r\n  border-top-color: #FFFFFF;\r\n  border-top-width: 0;\r\n}\r\n\r\n#hieiepgvox .gt_bottom_border {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#hieiepgvox .gt_col_headings {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#hieiepgvox .gt_col_heading {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 6px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#hieiepgvox .gt_column_spanner_outer {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n}\r\n\r\n#hieiepgvox .gt_column_spanner_outer:first-child {\r\n  padding-left: 0;\r\n}\r\n\r\n#hieiepgvox .gt_column_spanner_outer:last-child {\r\n  padding-right: 0;\r\n}\r\n\r\n#hieiepgvox .gt_column_spanner {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  overflow-x: hidden;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n#hieiepgvox .gt_group_heading {\r\n  padding: 8px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#hieiepgvox .gt_empty_group_heading {\r\n  padding: 0.5px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#hieiepgvox .gt_from_md > :first-child {\r\n  margin-top: 0;\r\n}\r\n\r\n#hieiepgvox .gt_from_md > :last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n#hieiepgvox .gt_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  margin: 10px;\r\n  border-top-style: solid;\r\n  border-top-width: 1px;\r\n  border-top-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#hieiepgvox .gt_stub {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-right-style: solid;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  padding-left: 12px;\r\n}\r\n\r\n#hieiepgvox .gt_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#hieiepgvox .gt_first_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#hieiepgvox .gt_grand_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#hieiepgvox .gt_first_grand_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: double;\r\n  border-top-width: 6px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#hieiepgvox .gt_striped {\r\n  background-color: rgba(128, 128, 128, 0.05);\r\n}\r\n\r\n#hieiepgvox .gt_table_body {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#hieiepgvox .gt_footnotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#hieiepgvox .gt_footnote {\r\n  margin: 0px;\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#hieiepgvox .gt_sourcenotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#hieiepgvox .gt_sourcenote {\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#hieiepgvox .gt_left {\r\n  text-align: left;\r\n}\r\n\r\n#hieiepgvox .gt_center {\r\n  text-align: center;\r\n}\r\n\r\n#hieiepgvox .gt_right {\r\n  text-align: right;\r\n  font-variant-numeric: tabular-nums;\r\n}\r\n\r\n#hieiepgvox .gt_font_normal {\r\n  font-weight: normal;\r\n}\r\n\r\n#hieiepgvox .gt_font_bold {\r\n  font-weight: bold;\r\n}\r\n\r\n#hieiepgvox .gt_font_italic {\r\n  font-style: italic;\r\n}\r\n\r\n#hieiepgvox .gt_super {\r\n  font-size: 65%;\r\n}\r\n\r\n#hieiepgvox .gt_footnote_marks {\r\n  font-style: italic;\r\n  font-weight: normal;\r\n  font-size: 65%;\r\n}\r\nApple's 4. Quarter 2021\r\n    variable\r\n      value\r\n    Ticker\r\nAAPLReport Date\r\n2021-09-30Publish Date\r\n2021-10-29Revenue\r\n83360000000.000000Gross Profit\r\n35174000000.000000Operating Expenses\r\n-11388000000.000000Research & Development\r\n-5772000000.000000\r\n\r\nThe {simfinapi} package\r\nAccessing the API in this way is somewhat cumbersome for more complex matters. But thankfully someone has written an R package for this as well.\r\nThanks to Matthias Gomolka for maintaining the {simfinapi} R package. This package wraps the SimFin API and allows us an easier access.\r\nFirst we set our API-key and a cache directory for our requests.\r\n\r\n\r\n# Setting the api key\r\nsfa_set_api_key(api_key = Sys.getenv(\"SIMFIN_KEY\"))\r\n# Setting up cache directory\r\nsfa_set_cache_dir(here(\"_posts/2021-12-15-apis-and-parameterized-reports\", \r\n                       \"simfin_cache\"), create = TRUE)\r\n\r\n\r\n\r\nNow we can use a set of functions to retrieve the information of interest. Our first request can be rewritten in one line as this:\r\n\r\n\r\navailable_companies <- sfa_get_entities()\r\n\r\n\r\n\r\nIf we want to look at some basic information for a company like Apple, we would write:\r\n\r\n\r\ncompany_infos <- sfa_get_info(ticker = \"AAPL\")\r\n\r\n\r\n\r\nReporting with R\r\nOne of the biggest strengths of R is its ability to produce beautiful reproducible reports and articles. This is done with {RMarkdown} and additional packages like {knitr}, {distill} etc. To learn more, I recommend the RMarkdown Cookbook by Yihui Xie, Christophe Dervieux and Emily Riederer.\r\nFor our small example report we want to focus on a specific set of companies. Let‚Äôs say we want to know how the stock prices of different social media networks performed in 2020. Were all companies equally affected by the Corona Virus? What we want also is to be able to change the set of companies as well as the year of interest programmatically when rendering the report. RMarkdown lets you define specific parameters at the top that you can access then inside your R code chunks.\r\nTo include these parameters in our report we have to define them first in the YAML header of our document. In our case this may look like this:\r\n\r\nparams:\r\n  stocks: [\"FB\", \"TWTR\", \"SNAP\", \"PINS\"]\r\n  fiscal_year: 2020\r\n\r\nHere we provide a list of stocks and the fiscal year as variables. We can access for example the list of stocks in our script with params$stocks.\r\nStock prices over the year\r\nIn this manner we can now use our parameters as arguments for the {simfinapi} functions.\r\n\r\n\r\n# Get company infos\r\ncompany_infos <- sfa_get_info(ticker = params$stocks)\r\n\r\n# Get stock prices of companies of interest\r\nshares <- sfa_get_prices(ticker = params$stocks) |> \r\n  left_join(company_infos)\r\n\r\n\r\n\r\nNow we can generate an outpot comparing the stock price development over the year we specified before.\r\n\r\n\r\nshares |> \r\n  mutate(year = year(date)) |> \r\n  # Filter only prices for our year of interest\r\n  filter(year == params$fiscal_year) |> \r\n  ggplot(aes(x = date, y = adj_close)) +\r\n  geom_line() +\r\n  scale_y_continuous(labels = scales::dollar_format()) +\r\n  facet_wrap(~company_name, scales = \"free_y\") +\r\n  scale_x_date(date_breaks = \"3 months\", date_labels = \"%b\") +\r\n  labs(title = glue::glue(\"Stock prices over the year {params$fiscal_year}\"),\r\n       x = NULL,\r\n       y = NULL)\r\n\r\n\r\n\r\n\r\nWe can not only filter by our parameters but also using it to dynamically change the title of the plot. With different scales it is hard to compare the development between the selected companies. That‚Äôs why we‚Äôll produce a plot with a logarithmized y axis.\r\n\r\n\r\nshares |>  \r\n  mutate(year = year(date)) |>  \r\n  filter(year == params$fiscal_year) |> \r\n  ggplot(aes(x = date, y = adj_close, colour = company_name)) +\r\n  geom_line(lwd = 1) +\r\n  scale_y_continuous(trans = \"log10\", labels = scales::dollar_format()) +\r\n  viridis::scale_colour_viridis(discrete = TRUE) +\r\n  scale_x_date(date_breaks = \"3 months\", date_labels = \"%b\") +\r\n  labs(title = \"Comparison with logarithmized y axis\",\r\n       x = NULL,\r\n       y = NULL,\r\n       colour = NULL) \r\n\r\n\r\n\r\n\r\nHere we can see directly the comparison between companies and specifically the ‚ÄúCorona effect‚Äù in the middle of march. By now I guess many have seen logarithmized scales as they were quite popular to illustrate exponential growth of Corona Virus cases. The difference between 10$ and 100$ is the same as the difference between 30$ and 300$. The social network whose share price has risen the most is Pinterest. One hypothesis is that Pinterest in particular could benefit from the retreat into the own four walls. On this platform, the topics of designing and decorating the home, garden etc. are popular.\r\nCreating your own metric\r\nNow we don‚Äôt want to only compare the development of the stock prices, but have a deeper look at some characteristics of these companies. The SimFin API offers a variety of variables and information. We can access them through the {simfinapi} function sfa_get_statement(). For now, we want to calculate our own metric to compare our four companies. This metric will be the Rule of 401 which is typically applied to SaaS (Software as a Service) companies to evaluate their development. Two metrics will be combined here. One is the growth of the company and the other is profit. In the first years of a company, it is common that there is no profit yet, but an emphasis on growth. As a rule of thumb the sum of growth and profit should equal to at least 40. For example 50% Growth and -10% Profit Margin would still satisfy this condition.\r\n\\[\r\nRule\\; of\\; 40 = Growth + Profit\\; Margin\r\n\\]\r\nThis simple metric can, of course, also be weighted if one of the two components is considered more relevant. Now let‚Äôs examine what this metric looks like for companies at the end of the fiscal year.\r\n\r\n\r\n# The net profit margin information is found in the \"derived\" statement\r\nderived_q4 <- sfa_get_statement(ticker = params$stocks,\r\n                                fyear = params$fiscal_year,\r\n                                period = \"q4\",\r\n                                statement = \"derived\")\r\n\r\nderived_q3 <- sfa_get_statement(ticker = params$stocks,\r\n                                fyear = params$fiscal_year,\r\n                                period = \"q3\",\r\n                                statement = \"derived\")\r\n\r\n# The revenue information can be found in the pl (profit/loss) statement\r\nprofit_loss_q4 <- sfa_get_statement(ticker = params$stocks,\r\n                                    fyear = params$fiscal_year,\r\n                                    period = \"q4\",\r\n                                    statement = \"pl\")\r\n\r\nprofit_loss_q3 <- sfa_get_statement(ticker = params$stocks,\r\n                                    fyear = params$fiscal_year,\r\n                                    period = \"q3\",\r\n                                    statement = \"pl\")\r\n# Define our own Metric\r\nrule_40 <- profit_loss_q4 |> \r\n  select(ticker, fiscal_year, revenue) |> \r\n  mutate(growth = revenue/profit_loss_q3$revenue - 1) |> \r\n  inner_join(select(derived_q4, net_profit_margin, ticker)) |> \r\n  mutate(rule_40 = growth + net_profit_margin,\r\n         revenue = revenue/1e6)\r\n\r\n\r\n\r\n\r\n\r\nhtml {\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\r\n}\r\n\r\n#iyvdjarwlm .gt_table {\r\n  display: table;\r\n  border-collapse: collapse;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: #333333;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  background-color: #FFFFFF;\r\n  width: auto;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #A8A8A8;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #A8A8A8;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n}\r\n\r\n#iyvdjarwlm .gt_heading {\r\n  background-color: #FFFFFF;\r\n  text-align: center;\r\n  border-bottom-color: #FFFFFF;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#iyvdjarwlm .gt_title {\r\n  color: #333333;\r\n  font-size: 125%;\r\n  font-weight: initial;\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n  border-bottom-color: #FFFFFF;\r\n  border-bottom-width: 0;\r\n}\r\n\r\n#iyvdjarwlm .gt_subtitle {\r\n  color: #333333;\r\n  font-size: 85%;\r\n  font-weight: initial;\r\n  padding-top: 0;\r\n  padding-bottom: 6px;\r\n  border-top-color: #FFFFFF;\r\n  border-top-width: 0;\r\n}\r\n\r\n#iyvdjarwlm .gt_bottom_border {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#iyvdjarwlm .gt_col_headings {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#iyvdjarwlm .gt_col_heading {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 6px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#iyvdjarwlm .gt_column_spanner_outer {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: normal;\r\n  text-transform: inherit;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n}\r\n\r\n#iyvdjarwlm .gt_column_spanner_outer:first-child {\r\n  padding-left: 0;\r\n}\r\n\r\n#iyvdjarwlm .gt_column_spanner_outer:last-child {\r\n  padding-right: 0;\r\n}\r\n\r\n#iyvdjarwlm .gt_column_spanner {\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: bottom;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  overflow-x: hidden;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n#iyvdjarwlm .gt_group_heading {\r\n  padding: 8px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#iyvdjarwlm .gt_empty_group_heading {\r\n  padding: 0.5px;\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  vertical-align: middle;\r\n}\r\n\r\n#iyvdjarwlm .gt_from_md > :first-child {\r\n  margin-top: 0;\r\n}\r\n\r\n#iyvdjarwlm .gt_from_md > :last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n#iyvdjarwlm .gt_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  margin: 10px;\r\n  border-top-style: solid;\r\n  border-top-width: 1px;\r\n  border-top-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 1px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 1px;\r\n  border-right-color: #D3D3D3;\r\n  vertical-align: middle;\r\n  overflow-x: hidden;\r\n}\r\n\r\n#iyvdjarwlm .gt_stub {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  font-size: 100%;\r\n  font-weight: initial;\r\n  text-transform: inherit;\r\n  border-right-style: solid;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n  padding-left: 12px;\r\n}\r\n\r\n#iyvdjarwlm .gt_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#iyvdjarwlm .gt_first_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#iyvdjarwlm .gt_grand_summary_row {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  text-transform: inherit;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n}\r\n\r\n#iyvdjarwlm .gt_first_grand_summary_row {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  border-top-style: double;\r\n  border-top-width: 6px;\r\n  border-top-color: #D3D3D3;\r\n}\r\n\r\n#iyvdjarwlm .gt_striped {\r\n  background-color: rgba(128, 128, 128, 0.05);\r\n}\r\n\r\n#iyvdjarwlm .gt_table_body {\r\n  border-top-style: solid;\r\n  border-top-width: 2px;\r\n  border-top-color: #D3D3D3;\r\n  border-bottom-style: solid;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n}\r\n\r\n#iyvdjarwlm .gt_footnotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#iyvdjarwlm .gt_footnote {\r\n  margin: 0px;\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#iyvdjarwlm .gt_sourcenotes {\r\n  color: #333333;\r\n  background-color: #FFFFFF;\r\n  border-bottom-style: none;\r\n  border-bottom-width: 2px;\r\n  border-bottom-color: #D3D3D3;\r\n  border-left-style: none;\r\n  border-left-width: 2px;\r\n  border-left-color: #D3D3D3;\r\n  border-right-style: none;\r\n  border-right-width: 2px;\r\n  border-right-color: #D3D3D3;\r\n}\r\n\r\n#iyvdjarwlm .gt_sourcenote {\r\n  font-size: 90%;\r\n  padding: 4px;\r\n}\r\n\r\n#iyvdjarwlm .gt_left {\r\n  text-align: left;\r\n}\r\n\r\n#iyvdjarwlm .gt_center {\r\n  text-align: center;\r\n}\r\n\r\n#iyvdjarwlm .gt_right {\r\n  text-align: right;\r\n  font-variant-numeric: tabular-nums;\r\n}\r\n\r\n#iyvdjarwlm .gt_font_normal {\r\n  font-weight: normal;\r\n}\r\n\r\n#iyvdjarwlm .gt_font_bold {\r\n  font-weight: bold;\r\n}\r\n\r\n#iyvdjarwlm .gt_font_italic {\r\n  font-style: italic;\r\n}\r\n\r\n#iyvdjarwlm .gt_super {\r\n  font-size: 65%;\r\n}\r\n\r\n#iyvdjarwlm .gt_footnote_marks {\r\n  font-style: italic;\r\n  font-weight: normal;\r\n  font-size: 65%;\r\n}\r\nRule of 40\r\n    ticker\r\n      fiscal_year\r\n      revenue\r\n      growth\r\n      net_profit_margin\r\n      rule_40\r\n    FB\r\n2020\r\n28071\r\n0.307\r\n0.400\r\n0.707PINS\r\n2020\r\n706\r\n0.594\r\n0.295\r\n0.889SNAP\r\n2020\r\n911\r\n0.343\r\n-0.124\r\n0.219TWTR\r\n2020\r\n1289\r\n0.377\r\n0.172\r\n0.549\r\n\r\nPinterest reached with almost 60% the highest growth relative to the previous quarter. Facebook - or Meta as it‚Äôs now being called - had the highest profitability. Added together only Snap was not able to satisfy the Rule of 40 metric.\r\nIn such a way, reports can now be created programmatically. If we want to e.g.¬†exchange Snapchat with Google (Ticker is GOOG), we would render our report as follows:\r\n\r\n\r\nrmarkdown::render(my_report.Rmd, \r\n                  params = list(stocks = c(\"FB\", \"TWTR\", \"GOOG\", \"PINS\")))\r\n\r\n\r\n\r\nConclusion\r\nThere are countless possibilities to create specific reporting templates and functions for your own use cases. Maybe you need to report regularly on companies or industries? This post should give you the tools to do that by accessing the SimFin API. A really minimal example of how such a report might look like can be found here in the Github repo of this blogpost. The output format is of course not limited to html, but can be PDF as well.\r\nAnother use case could be creating a report to regularly display Social Media statistics or the number of people who visited your website. For the latter purpose you could access the Google Analytics API e.g. via the {googleAnalyticsR} package. However, the setup would be similar to the one presented here.\r\n\r\nhttps://kpisense.com/glossary/rule-of-40‚Ü©Ô∏é\r\n",
    "preview": "posts/2021-12-15-apis-and-parameterized-reports/img/use_apis.jpg",
    "last_modified": "2021-12-23T14:45:48+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-05-looping-over-the-bridge/",
    "title": "Looping over the bridge",
    "description": "Comparing loops by simulating a Squid Game scene",
    "author": [
      {
        "name": "Lukas Gr√∂ninger",
        "url": {}
      }
    ],
    "date": "2021-12-05",
    "categories": [
      "R",
      "simulation"
    ],
    "contents": "\r\n\r\nContents\r\nLet the Game begin\r\nMonte Carlo Solution\r\nBenchmarking for vs while loop\r\nMathematical Solution\r\n\r\n\r\nA few weeks ago I did an introductory R workshop where one of the students asked about loops and the difference of for vs while loops. This blogpost is about illustrating these two types of loops using a simulation example.\r\nLet the Game begin\r\nI think the majority knows the Netflix show ‚ÄúSquid Game‚Äù. In this series the contestants have to survive several deadly games. Here I want to focus on the 5. game of the show. There are 16 players who have to pass a bridge of 18 * 2 glass plates. At each step they have to decide on which plate they step. With a 50% chance they jump on the harder glass which is able to hold their body, the other 50% will mean their death. As I was watching the show I thought that this would be a perfect example to answer a statistical question by using loops and simulation.\r\nThe question I wanted to answer was:\r\n\r\nHow many players do we expect to survive the game?\r\n\r\n\r\n\r\n\r\nFigure 1: Source: https://www.distractify.com/p/games-played-in-squid-game\r\n\r\n\r\n\r\nRemark:\r\nAfter opening twitter, I came across a tweet discussing John Helveston‚Äôs blogpost where he basically explained exactly what I wanted to do. I highly recommend his blog. I adapted his run_game function and where he used data.table I went with the tidy alternative.\r\nMonte Carlo Solution\r\nWe can solve the question about the number of survivors to expect by simulating the game. When using random simulation to answer statistical problems, this is called Monte Carlo Simulation.\r\nFirst we load the necessary library and set a custom theme for our plots.\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(microbenchmark)\r\n\r\nplotutils::set_custom_theme(base_size = 32)\r\n\r\n\r\n\r\nThen we create a dataframe as an input for the game. In this dataframe the alive column is set to 1 as in the beginning obviously every player is alive.\r\n\r\n\r\n# Define number of players\r\nnum_players <- 16\r\nplayers <- tibble(player = seq(num_players), \r\n                  alive = 1)\r\n\r\n# Let's have a look at the dataframe\r\nplayers\r\n\r\n\r\n# A tibble: 16 x 2\r\n   player alive\r\n    <int> <dbl>\r\n 1      1     1\r\n 2      2     1\r\n 3      3     1\r\n 4      4     1\r\n 5      5     1\r\n 6      6     1\r\n 7      7     1\r\n 8      8     1\r\n 9      9     1\r\n10     10     1\r\n11     11     1\r\n12     12     1\r\n13     13     1\r\n14     14     1\r\n15     15     1\r\n16     16     1\r\n\r\nNow we are going to create the function for our game. This is a great example to look at the differences between for and while loops.\r\nWe start by creating a function using a for loop:\r\n\r\n\r\n# Define a function for simulating one game using a for loop\r\nrun_game_for <- function(players, num_steps) {\r\n  lead_player <- 1\r\n  for (step in seq(num_steps)) {\r\n    # 50% chance that the glass is safe\r\n    if (sample(c(TRUE, FALSE), 1)) {\r\n      # It is safe, now the player can try the next one!\r\n      next\r\n    } else {\r\n      # The glass broke...\r\n      # Before continuing, check if any players are still alive\r\n      if (sum(players$alive) == 0) { return(0) }\r\n      # The lead player died\r\n      players$alive[lead_player] <- 0\r\n      lead_player <- lead_player + 1\r\n    }\r\n  }\r\n  return(sum(players$alive))\r\n}\r\n\r\n\r\n\r\nThen we create a function using a while loop. The setup is quite similar to the previously used run_game_for function.\r\n\r\n\r\n# Define a function for simulating one game using a while loop\r\nrun_game_while <- function(players, num_steps) {\r\n  # Initialize starting values\r\n  lead_player <- 1\r\n  current_step <- 0\r\n  game_running <- TRUE\r\n  \r\n  while (game_running) {\r\n    # Let's see if the glass holds...\r\n    if (sample(c(TRUE, FALSE), 1)) {\r\n      # The glass holds and the player can go one step further\r\n      current_step <- current_step + 1\r\n    } else {\r\n      # Check if there are still players alive, if not end the game\r\n      if (sum(players$alive) == 0) { return(0)}\r\n      # Apparently the glass didnt hold and the current lead player dies\r\n      players$alive[lead_player] <- 0\r\n      lead_player <- lead_player + 1\r\n      # Anyway the player can go one step further \r\n      current_step <- current_step + 1\r\n    }\r\n    if (current_step == num_steps) {\r\n      # If they got to the last step, they did it and the game stops\r\n      game_running <- FALSE\r\n    }\r\n  }\r\n  # Return the number of remaining players\r\n  return(sum(players$alive))\r\n}\r\n\r\n\r\n\r\nLet‚Äôs give it a try and see how many survive in our game.\r\n\r\n\r\nset.seed(001)\r\n\r\n# Run one iteration of the game\r\nsingle_game <- run_game_while(players, num_steps = 18)\r\nsingle_game\r\n\r\n\r\n[1] 9\r\n\r\nWe were interested in the expected value of the outcome. One iteration is not enough, but this is no problem at all. We can simply simulate our game multiple times.\r\n\r\n\r\n# Set seed value to keep reproducibility and to give a hint who wins the game\r\nset.seed(456)\r\n\r\n# Define number of runs or games we want to play\r\nn_runs <- 10000\r\n\r\n# Create dataframe with outcome of each game\r\nsims <- tibble(trial = seq(n_runs)) |> \r\n  rowwise() |> \r\n  mutate(while_loop = run_game_while(players, num_steps = 18),\r\n         for_loop = run_game_for(players, num_steps = 18)) |> \r\n  pivot_longer(-trial, names_to = \"loop\")\r\n\r\n\r\n\r\nHave a look at the descriptive statistics:\r\n\r\n\r\nsummary(sims$value)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n  0.000   6.000   7.000   6.976   8.000  15.000 \r\n\r\nThere were games where zero players survived the game and there were games where almost all players managed to survive.\r\nOf course we can also visualize our distribution:\r\n\r\n\r\n# Visualizing the resulting distribution\r\nsims |> \r\n  ggplot(aes(x = value, fill = loop)) +\r\n  geom_bar(position = position_dodge()) +\r\n  scale_x_continuous(breaks = seq(0, num_players)) +\r\n  labs(title = \"Distribution of numbers of surviving players\",\r\n       x = \"N surviving players\",\r\n       fill = NULL)\r\n\r\n\r\n\r\n\r\nThe two different colours indicate which function was used to calculate the result. From this graph we directly see almost the exact same result from the two functions.\r\nTo answer our previously posed question: We would expect 7 players to survive the game.\r\nBenchmarking for vs while loop\r\nNow we can also test the performance of the different functions against each other.\r\n\r\n\r\nset.seed(001)\r\n\r\ntest <- microbenchmark(\r\n  run_game_for(players, num_steps = 18),\r\n  run_game_while(players, num_steps = 18)\r\n)\r\n\r\nautoplot(test)\r\n\r\n\r\n\r\n\r\nAgain there is not really a difference‚Ä¶\r\nMathematical Solution\r\nOf course we can not only simulate the game to get to our solution.\r\nHere is the mathematical formula for n players:\r\n\\[\r\n\\sum_{i = 0}^{n-1} \\binom{18}{i} * 0.5^i * 0.5^{18-i} * (n-i)\r\n\\]\r\nWe can convert it to R Code and calculate the result.\r\n\r\n\r\nn <- 16\r\n\r\nexpected_fun <- function(i) choose(18, i) * 0.5^i * 0.5^(18-i) * (n - i)\r\n\r\nmap_dbl(0:(n-1), expected_fun) |> sum()\r\n\r\n\r\n[1] 7.000076\r\n\r\nEt voil√†! The result from the Monte Carlo simulation was confirmed.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-12-05-looping-over-the-bridge/img/squid_game_bridge.jpg",
    "last_modified": "2021-12-21T14:04:11+01:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "I started a Blog",
    "description": "Why did I start it and what are my plans?",
    "author": [
      {
        "name": "Lukas Gr√∂ninger",
        "url": {}
      }
    ],
    "date": "2021-12-03",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nWhy did I start it?\r\nWhat are my plans?\r\n\r\nWhy did I start it?\r\nAfter reading and seeing so many great R or data science blogs I wanted to join the game. Whenever I‚Äôm searching for a solution for a problem at work or at the university, I stumble across a blog post that explains something or pushes me in the right direction. I‚Äôve benefited soo much from various articles, posts or ideas. Additionally having a small place in the Internet sounded like a nice idea. Moreover, the R community is so friendly, welcoming and inspiring, that I thought I could participate a bit.\r\nWhat are my plans?\r\nAt the moment I don‚Äôt have any big plans for article series about certain topics. I just wanted to create something where I could share some of my work. In the best case, this blog then also serves someone to come across the solution to his or her problem.\r\nJust a small warning in the end. You should not expect to see only fully elaborated work and also the code might not be that elegant and efficient as seen on other great blogs (see list below).\r\nThis provides me with both an excuse and the motivation to get stuff online. Pls consider the whole thing as a work in progress‚Ä¶\r\nBlogs/People that inspired me:\r\nThe Mockup Blog\r\nJesse Mostipak\r\nJosiah Parry\r\nJohn Paul Helveston\r\nDanielle Navarro\r\nShannon Pileggi\r\nAlison Hill\r\nColin Fay\r\nand many more!\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-12-06T11:37:32+01:00",
    "input_file": {}
  }
]
