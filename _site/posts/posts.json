[
  {
    "path": "posts/2021-12-05-looping-over-the-bridge/",
    "title": "Looping over the bridge",
    "description": "Comparing loops by simulating a Squid Game scene",
    "author": [
      {
        "name": "Lukas Gröninger",
        "url": {}
      }
    ],
    "date": "2021-12-05",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nLet the Game begin\r\nMonte Carlo Solution\r\nBenchmarking for vs while loop\r\nMathematical Solution\r\n\r\n\r\nA few weeks ago I did an introductory R workshop where one of the students asked about loops and the difference of for vs while loops. This blogpost is about illustrating these two types of loops using a simulation example.\r\nLet the Game begin\r\nI think the majority knows the Netflix show “Squid Game”. In this series the contestants have to survive several deadly games. Here I want to focus on the 5. game of the show. There are 16 players who have to pass a bridge of 18 * 2 glass plates. At each step they have to decide on which plate they step. With a 50% chance they jump on the harder glass which is able to hold their body, the other 50% will mean their death. As I was watching the show I thought that this would be a perfect example to answer a statistical question by using loops and simulation.\r\nThe question I wanted to answer was:\r\n\r\nHow many players do we expect to survive the game?\r\n\r\n\r\n\r\n\r\nFigure 1: Source: https://www.distractify.com/p/games-played-in-squid-game\r\n\r\n\r\n\r\nRemark:\r\nAfter opening twitter, I came across a tweet discussing John Helveston’s blogpost where he basically explained exactly what I wanted to do. I highly recommend his blog. I adapted his run_game function and where he used data.table I went with the tidy alternative.\r\nMonte Carlo Solution\r\nWe can solve the question about the number of survivors to expect by simulating the game. When using random simulation to answer statistical problems, this is called Monte Carlo Simulation.\r\nFirst we load the necessary library and set a custom theme for our plots.\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(microbenchmark)\r\n\r\nplotutils::set_custom_theme(base_size = 32)\r\n\r\n\r\n\r\nThen we create a dataframe as an input for the game. In this dataframe the alive column is set to 1 as in the beginning obviously every player is alive.\r\n\r\n\r\n# Define number of players\r\nnum_players <- 16\r\nplayers <- tibble(player = seq(num_players), \r\n                  alive = 1)\r\n\r\n# Let's have a look at the dataframe\r\nplayers\r\n\r\n\r\n# A tibble: 16 x 2\r\n   player alive\r\n    <int> <dbl>\r\n 1      1     1\r\n 2      2     1\r\n 3      3     1\r\n 4      4     1\r\n 5      5     1\r\n 6      6     1\r\n 7      7     1\r\n 8      8     1\r\n 9      9     1\r\n10     10     1\r\n11     11     1\r\n12     12     1\r\n13     13     1\r\n14     14     1\r\n15     15     1\r\n16     16     1\r\n\r\nNow we are going to create the function for our game. This is a great example to look at the differences between for and while loops.\r\nWe start by creating a function using a for loop:\r\n\r\n\r\n# Define a function for simulating one game using a for loop\r\nrun_game_for <- function(players, num_steps) {\r\n  lead_player <- 1\r\n  for (step in seq(num_steps)) {\r\n    # 50% chance that the glass is safe\r\n    if (sample(c(TRUE, FALSE), 1)) {\r\n      # It is safe, now the player can try the next one!\r\n      next\r\n    } else {\r\n      # The glass broke...\r\n      # Before continuing, check if any players are still alive\r\n      if (sum(players$alive) == 0) { return(0) }\r\n      # The lead player died\r\n      players$alive[lead_player] <- 0\r\n      lead_player <- lead_player + 1\r\n    }\r\n  }\r\n  return(sum(players$alive))\r\n}\r\n\r\n\r\n\r\nThen we create a function using a while loop. The setup is quite similar to the previously used run_game_for function.\r\n\r\n\r\n# Define a function for simulating one game using a while loop\r\nrun_game_while <- function(players, num_steps) {\r\n  # Initialize starting values\r\n  lead_player <- 1\r\n  current_step <- 0\r\n  game_running <- TRUE\r\n  \r\n  while (game_running) {\r\n    # Let's see if the glass holds...\r\n    if (sample(c(TRUE, FALSE), 1)) {\r\n      # The glass holds and the player can go one step further\r\n      current_step <- current_step + 1\r\n    } else {\r\n      # Check if there are still players alive, if not end the game\r\n      if (sum(players$alive) == 0) { return(0)}\r\n      # Apparently the glass didnt hold and the current lead player dies\r\n      players$alive[lead_player] <- 0\r\n      lead_player <- lead_player + 1\r\n      # Anyway the player can go one step further \r\n      current_step <- current_step + 1\r\n    }\r\n    if (current_step == num_steps) {\r\n      # If they got to the last step, they did it and the game stops\r\n      game_running <- FALSE\r\n    }\r\n  }\r\n  # Return the number of remaining players\r\n  return(sum(players$alive))\r\n}\r\n\r\n\r\n\r\nLet’s give it a try and see how many survive in our game.\r\n\r\n\r\nset.seed(001)\r\n\r\n# Run one iteration of the game\r\nsingle_game <- run_game_while(players, num_steps = 18)\r\nsingle_game\r\n\r\n\r\n[1] 9\r\n\r\nWe were interested in the expected value of the outcome. One iteration is not enough, but this is no problem at all. We can simply simulate our game multiple times.\r\n\r\n\r\n# Set seed value to keep reproducibility and to give a hint who wins the game\r\nset.seed(456)\r\n\r\n# Define number of runs or games we want to play\r\nn_runs <- 10000\r\n\r\n# Create dataframe with outcome of each game\r\nsims <- tibble(trial = seq(n_runs)) |> \r\n  rowwise() |> \r\n  mutate(while_loop = run_game_while(players, num_steps = 18),\r\n         for_loop = run_game_for(players, num_steps = 18)) |> \r\n  pivot_longer(-trial, names_to = \"loop\")\r\n\r\n\r\n\r\nHave a look at the descriptive statistics:\r\n\r\n\r\nsummary(sims$value)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n  0.000   6.000   7.000   6.976   8.000  15.000 \r\n\r\nThere were games where zero players survived the game and there were games where almost all players managed to survive.\r\nOf course we can also visualize our distribution:\r\n\r\n\r\n# Visualizing the resulting distribution\r\nsims |> \r\n  ggplot(aes(x = value, fill = loop)) +\r\n  geom_bar(position = position_dodge()) +\r\n  scale_x_continuous(breaks = seq(0, num_players)) +\r\n  labs(title = \"Distribution of numbers of surviving players\",\r\n       x = \"N surviving players\",\r\n       fill = NULL)\r\n\r\n\r\n\r\n\r\nThe two different colours indicate which function was used to calculate the result. From this graph we directly see almost the exact same result from the two functions.\r\nTo answer our previously posed question: We would expect 7 players to survive the game.\r\nBenchmarking for vs while loop\r\nNow we can also test the performance of the different functions against each other.\r\n\r\n\r\nset.seed(001)\r\n\r\ntest <- microbenchmark(\r\n  run_game_for(players, num_steps = 18),\r\n  run_game_while(players, num_steps = 18)\r\n)\r\n\r\nautoplot(test)\r\n\r\n\r\n\r\n\r\nAgain there is not really a difference…\r\nMathematical Solution\r\nOf course we can not only simulate the game to get to our solution.\r\nHere is the mathematical formula for n players:\r\n\\[\r\n\\sum_{i = 0}^{n-1} \\binom{18}{i} * 0.5^i * 0.5^{18-i} * (n-i)\r\n\\]\r\nWe can convert it to R Code and calculate the result.\r\n\r\n\r\nn <- 16\r\n\r\nexpected_fun <- function(i) choose(18, i) * 0.5^i * 0.5^(18-i) * (n - i)\r\n\r\nmap_dbl(0:(n-1), expected_fun) |> sum()\r\n\r\n\r\n[1] 7.000076\r\n\r\nEt voilà! The result from the Monte Carlo simulation was confirmed.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-12-08T09:31:54+01:00",
    "input_file": "looping-over-the-bridge.knit.md"
  },
  {
    "path": "posts/welcome/",
    "title": "I started a Blog",
    "description": "Why did I start it and what are my plans?",
    "author": [
      {
        "name": "Lukas Gröninger",
        "url": {}
      }
    ],
    "date": "2021-12-03",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nWhy did I start it?\r\nWhat are my plans?\r\n\r\nWhy did I start it?\r\nAfter reading and seeing so many great R or data science blogs I wanted to join the game. Whenever I’m searching for a solution for a problem at work or at the university, I stumble across a blog post that explains something or pushes me in the right direction. I’ve benefited soo much from various articles, posts or ideas. Additionally having a small place in the Internet sounded like a nice idea. Moreover, the R community is so friendly, welcoming and inspiring, that I thought I could participate a bit.\r\nWhat are my plans?\r\nAt the moment I don’t have any big plans for article series about certain topics. I just wanted to create something where I could share some of my work. In the best case, this blog then also serves someone to come across the solution to his or her problem.\r\nJust a small warning in the end. You should not expect to see only fully elaborated work and also the code might not be that elegant and efficient as seen on other great blogs (see list below).\r\nThis provides me with both an excuse and the motivation to get stuff online. Pls consider the whole thing as a work in progress…\r\nBlogs/People that inspired me:\r\nThe Mockup Blog\r\nJesse Mostipak\r\nJosiah Parry\r\nJohn Paul Helveston\r\nDanielle Navarro\r\nShannon Pileggi\r\nAlison Hill\r\nColin Fay\r\nand many more!\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-12-06T11:37:32+01:00",
    "input_file": {}
  }
]
